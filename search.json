[{"title":"大家一起学英语","url":"/2023/03/07/English-Word/","content":"引言在学习OCC、PCL等C++库，或是其他一些技术时，通常需要阅读官方提供的技术手册，而这些手册大多是英文编写，虽然可以直接使用翻译软件进行翻译，但毕竟翻译软件有时翻译的也是词不达意，加之他可能把人家定义的类名之类的东西也翻译成中文，还不如直接看英文。综上，长远来看，提升自己的英文水平总没错，本文用来收集阅读英文手册或教程时遇到的各种不认识的单词，也不指望能将这些单词全部融汇贯通，但希望最起码下次见到时能认得它是个什么意思。\nOCC\ngeometry：几何学\nparametric：参数\ndimension：纬度\ninfinity：无限大\nsecond order：二阶\ncriteria：标准\nscaled ellipse：缩放的椭圆\ncylinder：圆筒\nconjugate：共轭的\nprojection：投影\nintersection：交叉点\ntopology：拓扑学\n\nPCL\ncomplicate：复杂化\ntrim：修剪\noutliers：离群值、异常值\ndeviation：偏差\n\nCloudCompare Wiki\nmesh：网格\n\n不定期更新中——\n","categories":["英文学习"],"tags":["English Word"]},{"title":"OCC7.6+VS2022配置","url":"/2023/03/08/OCC7.6_VS2022_config/","content":"OCC安装与编译安装OCC安装很简单，就是去官网https://dev.opencascade.org/ 下载安装包安装即可。\n这里用的是OCC7.6版本。\n\n\n注意：安装的时候路径不要有空格和汉字。\nVS2022编译v142的OCC安装之后得到的是OCC的编译前的资源文件，而想要使用OCC提供的方法还需要将这些文件进行编译。即编译后得到的文件才是我们使用OCC所必须的。\n这里我安装的VS版本为2022，其默认的生成工具是v143，而OCC7.6最新支持的生成工具是v142，所以需要稍微操作一下，使VS2022能编译OCC。\n需要注意的是，因为要用到v142生成工具，肯定要保证VS安装了v142的生成工具，没安的话打开Visual Studio Installer安一下即可。\n\n\n下面是OCC部分编译前的一些操作：打开安装目录下 \\opencascade-7.6.0 目录下的custom.bat，将其中要求的vcvarsall.bat文件所在路径填写完整，该路径跟VS安装的位置有关，下图我的路径配置。\n\n\n如果实在不知道在哪，可以安装一个软件”everything“，用它来查找vcvarsall.bat的位置即可\n\n\n之后，还是在 \\opencascade-7.6.0 目录下，打开env.bat，在图示位置添加：set “VCVER=vc143”\n\n\n再打开 \\opencascade-7.6.0\\adm\\msvc目录下，复制一份vc142并重命名为vc143，这就是前面提到的，OCC7.6还没有对应的2022版本（vc143）\n\n\n至此准备工作结束，可以用VS2022编译OCC7.6了\n回到目录 \\opencascade-7.6.0，双击msvc.bat，它会根据前面的配置打开对应版本的OCCT.sln，打开后会需要确认是否升级平台工具集，记得选择”无升级“。\n\n\n之后找到“解决方案资源管理器”，右键“解决方案”，选择“生成解决方案”即可\n\n\n等待VS编译完成\n（编译完成图–等我在新电脑上配的时候截一张，懒得再重新生成一遍了）\n编译完成后生成的文件在 \\opencascade-7.6.0\\win64\\vc14 目录下\n\n\n其中的bind文件夹、libd文件夹中的文件是我们使用OCC所必需的的文件。一般是bin文件夹和lib文件夹，不过在OCC这里是bind和libd，应该是分别表示bin和lib的debug版本。因为我一直用的debug版本调试，找的教程也都是说配bind和libd的，不太清楚这个bin和lib是不是在release版本下用的，等之后如果用到release调试的时候试一下看看，等试过之后再来补充。\nlibd文件夹，存放程序运行时所需要的lib文件，lib文件是指程序库（library）文件，也称为静态链接库（static library），它包含了一组可在程序中共享的函数和资源的代码。\nbind文件夹，存放运行lib时所必需的的dll文件，DLL（Dynamic Link Library）是一种可执行文件格式，它包含一组可在多个程序中共享的函数和资源。它通常被用于在 Windows 操作系统中实现共享库和插件的功能。一个 DLL 文件可以包含多个函数和资源，其他程序可以通过动态链接库（Dynamic Link Library）的方式调用 DLL 文件中的函数。\nVS中配置OCC环境前面也提到，我们所需的bind文件夹和libd文件夹生成好了之后，就可以配置在VS中使用OCC所需的一些属性，像OCC、PCL、VTK这种C++的库，其项目属性配置基本都是一致的，基本就是三步走。\n第一步，将dll文件所在路径，在OCC这里即是上述提到的bind文件夹路径，添加到系统环境变量Path中\n\n\n之后在我们所建的项目中，在解决方案栏中，右键点击项目，选择属性一栏\n\n\n在属性页找到 调试—&gt;环境，输入 PATH=%PATH% ，使调试时能找到环境变量中bind所在路径，进一步能找到dll文件\n\n\n第二步，在属性页中找到 链接器—&gt;常规—&gt;附加库目录，将libd所在路径添加进去，方便编译器编译时能找到lib文件\n\n\n再找到 链接器—&gt;输入—&gt;附加依赖项，将libd文件夹下所有的lib文件添加进去\n\n\n至于如何快速取得文件夹下所有lib文件列表，找到目标文件夹libd，在该文件夹下“shift+右键”，选择 Powershell打开\n\n\n在该命令窗口输入 ls *.lib -n，即可得到该文件夹下所有lib结尾的文件列表，其中-n是指定列出来的信息只包含文件名和后缀，可以自己试试不带-n的结果\n\n\n第三步，在属性页找到 C/C++—&gt;常规—&gt;附加库包含目录，将OCC的头文件路径添加进去，该路径为安装目录下 \\opencascade-7.6.0\\inc ，其中存放的是在使用OCC时所需的所有头文件\n\n\n上面三步无关顺序，能配完就行。\n至此，就可以在C++程序中使用OCC提供的各种功能啦，开始愉快编程啦~\nVS属性表的使用新建属性表上面配置的VS属性页只针对当前项目有效，如果要新建项目并使用OCC，需要将上面的三个步骤再配置一遍，很不方便。而使用VS属性表就可以实现只用配置一次，下次直接拿来用即可的效果\n在VS窗口上边菜单栏找到 视图—&gt;其他窗口—&gt;属性管理器\n\n\n选择之后，属性管理器就会出现在解决方案管理器旁边的位置\n\n\n找到自己需要的版本，比如我一般使用Debug|x64版本，我就在对应项旁边右键，选择 添加新项目属性表\n\n\n因为是给OCC配置的属性表，就叫OCC.props吧，至于这个位置，它默认是建在当前项目所在的文件夹中，可以自定义一个文件夹位置，就光用来存这种属性表，当时候项目中需要哪个属性表，就直接去那个文件夹中好就行。\n\n\n在建好的属性表里，把前面第二步、第三步里，关于“C/C++”和“链接器”选项中的部分复现一下即可，简单概括就是“C/C++”的附加包含目录里添加头文件目录，”链接器“的附加库目录里添加lib库路径、附加依赖项里把lib库中的所有lib添加进去。\n\n\n可以看到这个属性表里没有第一步中“调试”选项，所以在 调试—&gt;环境，输入 PATH=%PATH% 这一步还是需要在具体的新建项目中配置一下，步骤参考前面第一步。\n使用已有属性表上面属性表建好之后，下次新的项目要是用OCC的时候，直接把这个属性表引入即可\n在属性管理器，要是用的对应版本处右键点击，选择 添加现有属性页\n\n\n找到之前建好的属性表，添加即可\n\n\n需要注意的是，通过这种添加现有项方式加入的属性表并不是把之前建的表复制了一个放在新项目里，新项目中是找不到这个属性表文件的，它实际还是之前建的那个属性表，只是编译器把它链接了过来，使我们可以使用该表的配置。这也意味着你如果在对这个属性表进行改动，会影响到所有使用该属性表的项目，一定要注意。\n\n\n当然，其实也可以将之前建的属性表复制一个到新建项目的文件夹里，然后在添加现有项时添加当前这一个，这样就可以随便改了，也不会对别的项目有什么影响。\n以上。\n","categories":["教程"],"tags":["OCC"]},{"title":"Qt6.4_PCL1.12.1_VTK9.2_error(待整理)","url":"/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/","content":"问题描述一开始因为PCL自带一个VTK9.1环境，因为要VTK和Qt配合，去官网下了完整VTK9.2自己编译了一下，然后又在Qt项目里配了一下VTK的环境，估计是他先找到了PCL自带的VTK9.1环境，就没管我自己配的VTK9.2，导致报了个“未定义标识符VTK_UNICODE_STRING”的错\n（此处有图，等重新截一张）\n考虑到两个VTK环境冲突的问题，他把PCL自带的那个VTK9.2的环境配置都删了一遍，结果又出现了下面的问题\n\n\n看到这个dll想到可能是因为环境变量里PCL自带的VTK9,1和自己编译的VTK9.2冲突了，忘记改了，因为程序寻找dll文件是从环境变量PATH中从头到尾在找，当找到一个对应的目录的时候它就认定在这个目录里寻找dll文件了，而不会再往下找了，应该就是因为我把PCL自带的VTK9.1的bin路径放在了自己编译的VTK9.2的bin路径之前导致的问题\n结果一看不对啊，自己编译的VTK9.2的bin路径是在上面的呀，惊了。。。\n然后我又试了试直接把PCL自带的VTK9.1的bin路径删掉，结果程序报错找不到vtk9.1d的dll了，说明程序哪里还用着pcl自带的vtk9.1 。。。\n话说pcl自带的vtk9.1有QVTKOpenGLNativeWidget吗，有的话我直接用PCL自带vtk9.1算了。。。\n去看了一下没有，然后想起来了，这个模块是要编译VTK的时候选一下配合Qt才会生成，乐，还是要用自己配的。。。\n可能是PCL一些东西配合自带的VTK才能实现，明天试试把自己编译的VTK覆盖PCL自带的VTK试一下。。。记得做好备份\n实在不行就得把PCL编译需要的东西都下一遍，然后用CMake从头编译一下来弄了。。。\n第二天继续试，把VTK覆盖试了试好像不行\n然后开始调试，看看是哪个语句的问题，发现是初始化语句的问题，因为初始化用的是qvtkwidget版本时的代码，所以可能有些问题，于是就去找了QVTKOpenGLNativeWidget版本显示点云数据的代码\n结果照着别人的代码敲还是有问题\n\n\n找了找资料发现出现这种问题一般是因为这个类没有定义，其实就是vtkGenericOpenGLRenderWindow这个类的头文件没有引入，这里不得不吐槽一下，既然头文件没引入，你上面的的没啥不报错啊。。。\n引入头文件：\n#include &lt;vtkGenericOpenGLRenderWindow.h&gt;\n\n之后该语句就不会报错了\n\n\n以为终于没问题的时候，在执行到语句\nviewer.reset(new pcl::visualization::PCLVisualizer(renderer,renderWindow,&quot;viewer&quot;, false));\n\n的时候还是报错了。\n\n\n估计还是因为弄了两个vtk导致的，可能pcl1.12和自己配的这个vtk9.2不太搭，网上查了查资料，也都是自己下一个vtk9.1自己编译一下，然后覆盖原来的pcl自带的vtkk，然后再编译PCL。\n这次就老实照这个来一遍https://blog.csdn.net/qq_40732350/article/details/125394920，他跟我想的一样，除了vtk自己编译，其他直接用pcl自带的编译好的就行，省事。\n等开完会试一下。。。\n","categories":["问题"],"tags":["Qt","PCL","VTK"]},{"title":"Hello World","url":"/2021/03/20/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"}]
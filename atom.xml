<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-05T07:21:56.396Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dr.Unglaus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cmake使用笔记</title>
    <link href="http://example.com/2023/05/05/CMake-Note/"/>
    <id>http://example.com/2023/05/05/CMake-Note/</id>
    <published>2023-05-05T07:17:00.000Z</published>
    <updated>2023-05-05T07:21:56.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>最近再新电脑上使用cmake-gui的时候发现选项都列在一起，没有像之前旧电脑上那样把每一项归好类</p><img src="/2023/05/05/CMake-Note/image-20230505151913285.png" class="" title="image-20230505151913285"><p>旧电脑上是3.25版本的，这个新的是3.26，一开始以为是版本升级的负优化，结果重新下了个3.25还是一样的。</p><p>最后发现原来在界面上有个“Grouped”选项，选一下就好了。。。</p><img src="/2023/05/05/CMake-Note/image-20230505152057032.png" class="" title="image-20230505152057032">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;界面&quot;&gt;&lt;a href=&quot;#界面&quot; class=&quot;headerlink&quot; title=&quot;界面&quot;&gt;&lt;/a&gt;界面&lt;/h2&gt;&lt;p&gt;最近再新电脑上使用cmake-gui的时候发现选项都列在一起，没有像之前旧电脑上那样把每一项归好类&lt;/p&gt;
&lt;img src=&quot;/2023/</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="cmake" scheme="http://example.com/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>ccviewer学习笔记</title>
    <link href="http://example.com/2023/04/19/ccViewer-Note/"/>
    <id>http://example.com/2023/04/19/ccViewer-Note/</id>
    <published>2023-04-19T02:51:00.000Z</published>
    <updated>2023-04-21T03:42:55.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">ccViewer::ccViewer(QWidget *parent, Qt::WindowFlags flags)<br>: QMainWindow(parent, flags)<br>, m_glWindow(<span class="hljs-literal">nullptr</span>)<br>, m_selectedObject(<span class="hljs-literal">nullptr</span>)<br>, m_3dMouseInput(<span class="hljs-literal">nullptr</span>)<br></code></pre></td></tr></table></figure><p>这段代码是一个类 <code>ccViewer</code> 的构造函数的实现，该类是继承自 <code>QMainWindow</code> 类的。</p><p>构造函数的参数 <code>parent</code> 是一个指向父窗口的指针，参数 <code>flags</code> 是窗口的标志。</p><p>下面是成员变量的初始化：</p><ul><li><code>m_glWindow</code> 是一个指向 <code>QOpenGLWidget</code> 对象的指针，初始化为 <code>nullptr</code>。</li><li><code>m_selectedObject</code> 是一个指向选中的对象的指针，初始化为 <code>nullptr</code>。</li><li><code>m_3dMouseInput</code> 是一个指向 <code>Q3DMouseInput</code> 对象的指针，初始化为 <code>nullptr</code>。</li></ul><p>在这个构造函数中，这些成员变量都被初始化为默认值。这些成员变量可以在类的其他成员函数中使用，以实现类的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码解析&quot;&gt;&lt;a href=&quot;#代码解析&quot; class=&quot;headerlink&quot; title=&quot;代码解析&quot;&gt;&lt;/a&gt;代码解析&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
    <category term="cloudcompare" scheme="http://example.com/tags/cloudcompare/"/>
    
  </entry>
  
  <entry>
    <title>Qt6学习笔记</title>
    <link href="http://example.com/2023/04/17/Qt6.4-Note/"/>
    <id>http://example.com/2023/04/17/Qt6.4-Note/</id>
    <published>2023-04-17T13:14:46.000Z</published>
    <updated>2023-04-26T12:54:57.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><h2 id="clicked-、triggered-、toggled-三个信号的区别"><a href="#clicked-、triggered-、toggled-三个信号的区别" class="headerlink" title="clicked()、triggered()、toggled()三个信号的区别"></a>clicked()、triggered()、toggled()三个信号的区别</h2><h3 id="toggled"><a href="#toggled" class="headerlink" title="toggled()"></a>toggled()</h3><p>toggle 类似开关。 具有2个状态，打开/关闭。  使用这个信号，是在这2个状态之间切换。checkable按纽或是图标的槽函数应该用toggled()事件来激活</p><h3 id="triggered"><a href="#triggered" class="headerlink" title="triggered()"></a>triggered()</h3><p>trigger是一次性的。 点击后，无法改变状态。 要么是打开，要么是关闭。一般的按纽（uncheckable）的激活方式即是triggered()。更有触发的意思。这个单词还有另一个意思就是板机</p><h3 id="clicked"><a href="#clicked" class="headerlink" title="clicked()"></a>clicked()</h3><p>和triggered()用法一样，使用场景不同，triggered() 正常情况下应该广泛地多，比如快捷键等</p><h2 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h2><h3 id="信号-signals"><a href="#信号-signals" class="headerlink" title="信号 signals"></a>信号 signals</h3><p>信号的创建规则：</p><ul><li>信号使用 signals 关键字声明，在其后面有一个冒号“:”，在其前面不能有 public、private、protected 访问控制符，信号默认是 public 的。</li></ul><ul><li>信号只需像函数那样声明即可，其中可以有参数，参数的主要作用是用于和槽的通信，这就像普通函数的参数传递规则一样。信号虽然像函数，但是对他的调用方式不一样，信号需要使用 emit 关键字发射。</li></ul><ul><li>信号只需声明，不能对其进行定义，信号是由 moc 自动生成的。</li></ul><ul><li>信号的返回值只能是 void 类型的。</li></ul><h3 id="槽-slots"><a href="#槽-slots" class="headerlink" title="槽 slots"></a>槽 slots</h3><p>槽的创建规则：</p><ul><li>声明槽需要使用 slots 关键字，在其后面有一个冒号“:”，且槽需使用 public、private、protected 访问控制符之一。</li><li>槽就是一个普通的函数，可以像使用普通函数一样进行使用，槽与普通函数的主要区别是，槽可以与信号关联。</li></ul><h3 id="发射信号-emit"><a href="#发射信号-emit" class="headerlink" title="发射信号 emit"></a>发射信号 emit</h3><p>注意这里的”发射信号”指的是一个动作</p><p>发射信号的创建规则：</p><ul><li><p>发射信号需要使用 emit 关键字，注意，在 emit 后面不需要冒号。</p></li><li><p>emit 发射的信号使用的语法与调用普通函数相同，比如有一个信号为 void f(int)，则发送的语法为：emit f(3); </p></li><li><p>当信号被发射时，与其相关联的槽函数会被调用(注意：信号和槽需要使用</p></li><li><p>QObject::connect 函数进行关联之后，发射信号后才会调用相关联的槽函数。</p></li><li><p>因为信号位于类之中，因此发射信号的位置需要位于该类的成员函数中或该</p></li><li><p>类能见到信号的标识符的位置。</p></li></ul><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//头文件 m.h 的内容</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> :</span> <span class="hljs-keyword">public</span> QObject&#123; <span class="hljs-comment">//信号和槽必须继承自 QObject 类</span><br>  Q_OBJECT                    <span class="hljs-comment">//必须添加该宏</span><br>  <br>  <span class="hljs-comment">//public signals:void s1(int);  //错误 signals 前不能有访问控制符。</span><br>  <br>  signals:<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">s</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//使用 signals 关键字声明信号，信号的语法与声明函数相同。</span><br>  signals:<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<span class="hljs-comment">//正确，信号可以有参数，也可以重载。</span><br>  <br>  <span class="hljs-comment">//void s2()&#123;&#125; //错误，信号只需声明，不能定义。</span><br>  <br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">s3</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//注意：这仍是声明的一个信号</span><br><span class="hljs-keyword">public</span>:<span class="hljs-comment">//信号声明结束后，重新使用访问控制符，表示以下声明的是成员函数。</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">emit <span class="hljs-title">s3</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//发射信号</span><br>  &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><span class="hljs-keyword">public</span> QObject&#123;<br>  Q_OBJECT<br><span class="hljs-keyword">public</span> slots:               <span class="hljs-comment">//使用 slots 关键字声明槽</span><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;X&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>  &#125;<br>  <span class="hljs-comment">//slots: void x()&#123;&#125;     //错误，声明槽时需要指定访问控制符。</span><br>  <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123; <br>    <span class="hljs-comment">// emit s3();       //错误，在类 B 中对于标识符 s3 是不可见的</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">//源文件的内容</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br>  A ma; <br>  B mb;<br>  QObject::connect(&amp;ma,&amp;A::s3,&amp;mb,&amp;B::x); <span class="hljs-comment">//关联信号和槽</span><br>  ma.g(); <span class="hljs-comment">//调用g发送信号</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Qt-Designer使用"><a href="#Qt-Designer使用" class="headerlink" title="Qt Designer使用"></a>Qt Designer使用</h1><h2 id="菜单栏、工具栏的创建"><a href="#菜单栏、工具栏的创建" class="headerlink" title="菜单栏、工具栏的创建"></a>菜单栏、工具栏的创建</h2><p>创建新项目时，其实已经帮我们默认创建好菜单栏、工具栏和状态栏了。菜单栏在窗口顶部，可以看到“在这里输入”的提示，那一栏就是菜单栏的位置，其对象名为menuBar，可以在右侧对象检查器中看到，菜单栏只能有一个。工具栏在菜单栏下面紧挨着，初始也帮我们建了一个，对象名为mainToolBar，工具栏可以有多个，想创建的话，在主对象上右键-&gt;创建工具栏即可。状态栏我不知道在哪，不过这东西也只能有一个，且初始帮我们创建了，对象名为statusBar。</p><img src="/2023/04/17/Qt6.4-Note/image-20230418164800697.png" class="" title="image-20230418164800697"><p>在主对象上右键-&gt;添加工具栏以添加新的工具栏，状态栏因为已经有了所以这里显示”移除状态栏”，菜单栏也因为已经有了直接不显示，若初始没有菜单栏，这里右键就能看到“创建菜单栏”的选项。</p><img src="/2023/04/17/Qt6.4-Note/image-20230418171053498.png" class="" title="image-20230418171053498"><p>在菜单栏的“在这里输入”中输入具体的内容，如option。这时右侧menuBar下会多一栏menuoption，而且点击菜单栏的option，该栏会展开，一开始也是只有“在这里输入”和“添加分隔符”两项内容，在里面输入具体内容之后就相当于给它们创建了实体，如这里我输入了option1和option2，这种就算是具体的动作了，创建这两个的同时，不光右侧对象检查器的menuoption栏下会多两个QAction：actionoption1和actionoption2，动作编辑器中也会多出两项：actionoption1和actionoption2。另外，option1右侧可以看到蓝色的小加号，点击之后可以将option1再展开，通过“在这里输入”输入具体的名称，继续添加具体的项。</p><p>之后将具体的对象与槽函数连接来实现具体功能即可。</p><img src="/2023/04/17/Qt6.4-Note/image-20230418173258431.png" class="" title="image-20230418173258431">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;随笔&quot;&gt;&lt;a href=&quot;#随笔&quot; class=&quot;headerlink&quot; title=&quot;随笔&quot;&gt;&lt;/a&gt;随笔&lt;/h1&gt;&lt;h2 id=&quot;clicked-、triggered-、toggled-三个信号的区别&quot;&gt;&lt;a href=&quot;#clicked-、triggered</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>编译CloudCompare</title>
    <link href="http://example.com/2023/04/06/CloudCompare-Cmake/"/>
    <id>http://example.com/2023/04/06/CloudCompare-Cmake/</id>
    <published>2023-04-06T13:11:17.000Z</published>
    <updated>2023-05-12T12:45:29.359Z</updated>
    
    <content type="html"><![CDATA[<p>CloudCompare，后续简称CC</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="Qt5"><a href="#Qt5" class="headerlink" title="Qt5"></a>Qt5</h3><p>CC是基于Qt5开发的，所以编译前需要安装Qt5，具体的Qt5版本根据CC源码的版本可能也有不同，需要自己去看源码中build.md文件说明。我要编译的CC版本是2.12.4，该版本的build.md文件提到2.11+版本之后的Qt版本要求为：5.9 &lt;= Qt &lt; 6.0. 所以我直接安装了Qt5的最新版本Qt5.15.2，就用的官网提供的在线安装包，具体的安装教程见“Qt在线安装包配置国内镜像源”。</p><h3 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h3><p>OpenGL其实电脑有自带的，但我看Cmake找到的那个自带的好像是win8版本的，不知道好用不好用，我就给他重新配了之前VS安装的win11版本的。这个OpenGL不用特意装，安装Windows SDK就会带着，通过VS installer就可以安。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406213202725.png" class="" title="image-20230406213202725"><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>上面两个依赖配置好之后去官方Github下载需要编译的源码，前面也提到过，我选了v2.12.4版本</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406213413137.png" class="" title="image-20230406213413137"><p>下下来之后要注意这个其实是不完整的，作者把核心算法库单独拿了出来，放在CCCoreLib项目里。</p><p>我们直接打开下载下来的文件，找到”CloudCompare/libs/qCC_db/extern/“ 目录，会发现里面是空的，但是用Cmake编译的时候他又会报错，告诉你需要这个文件夹中的文件，那如何找到这个项目的位置，只需要在GitHub中找到这个目录的位置，会发现官方在这里给出了超链接，跟着超链接就能找到需要的内容。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406214843292.png" class="" title="image-20230406214843292"><p>点击这个超链接就会跳转到CCCoreLib库的所在，这里直接下载这个默认的即可</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406214307674.png" class="" title="image-20230406214307674"><p>之后将下载下来的文件解压到之前空文件夹的位置即可，后面再细说。</p><p>然后这个其实也不是完整的，它里面也有需要去其他地方下载的文件，找到”CCCoreLib/extern/“ 目录，发现里面也有个超链接</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406215131181.png" class="" title="image-20230406215131181"><p>这个下载默认的即可，下载下来解压到对应的目录。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406215401556.png" class="" title="image-20230406215401556"><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>下载下来一共3个项目</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406215555439.png" class="" title="image-20230406215555439"><p>将nanoflann中的内容，全部放到”CCCoreLib-master/extern/nanoflann“目录中</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406215837581.png" class="" title="image-20230406215837581"><p>然后再把上面这个组合好的CCCoreLib-master中的内容全部放到”CloudCompare-2.12.4/libs/qCC_db/extern/CCCoreLib“目录里</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406220053868.png" class="" title="image-20230406220053868"><p>这样才算是得到完整的能够编译的CC文件，后面就用这个CloudCompare-2.12.4文件夹里的内容做Source，用Cmake编译即可。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>老三样，三个文件夹source、build、install</p><p>Cmake编译，记得把install路径改过来</p><h3 id="配置Qt5路径"><a href="#配置Qt5路径" class="headerlink" title="配置Qt5路径"></a>配置Qt5路径</h3><p>主要是配Qt5_DIR的路径，根据自己的Qt5安装路径来配，我的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">E:&#x2F;QT5&#x2F;5.15.2&#x2F;msvc2019_64&#x2F;lib&#x2F;cmake&#x2F;Qt5<br></code></pre></td></tr></table></figure><p>配完这个之后其他的Qt5路径它就自动识别了</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406220458490.png" class="" title="image-20230406220458490"><h4 id="Qt5LinguistTools路径"><a href="#Qt5LinguistTools路径" class="headerlink" title="Qt5LinguistTools路径"></a>Qt5LinguistTools路径</h4><p>有一个除外，每错，就是这个Qt5LinguistTools的路径，明明安装了，而且也跟它识别到的其他的Qt5组件在一个路径里，不知道它为什么自己找不到，需要我们自己再告诉它一下，路径为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">E:&#x2F;QT5&#x2F;5.15.2&#x2F;msvc2019_64&#x2F;lib&#x2F;cmake&#x2F;Qt5LinguistTools<br></code></pre></td></tr></table></figure><h3 id="配置OpenGL路径"><a href="#配置OpenGL路径" class="headerlink" title="配置OpenGL路径"></a>配置OpenGL路径</h3><p>他其实自己找到了一个路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">C:&#x2F;Program Files (x86)&#x2F;Windows Kits&#x2F;8.0&#x2F;Lib&#x2F;win8&#x2F;um&#x2F;x64<br></code></pre></td></tr></table></figure><img src="/2023/04/06/CloudCompare-Cmake/image-20230406221544652.png" class="" title="image-20230406221544652"><p>但我看他这个路径名，好像是win8的版本吧。。。我不太放心，就用了前面提到的用VS安装的win11版本的，具体路径为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">E:&#x2F;Windows Kits&#x2F;10&#x2F;Lib&#x2F;10.0.22000.0&#x2F;um&#x2F;x64<br></code></pre></td></tr></table></figure><img src="/2023/04/06/CloudCompare-Cmake/image-20230406221749652.png" class="" title="image-20230406221749652"><p>至于具体怎么找到这个路径的，还是用到之前其它教程提到的”everything“，搜索”OpenGL32.lib“，这个文件所在路径即为所求</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406221949937.png" class="" title="image-20230406221949937"><p>之后就是一路configure、generate、Open Project老三样</p><p>然后在VS里”ALL_BUILD“右键生成、”INSTALL“右键生成即可</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230406222220907.png" class="" title="image-20230406222220907"><h2 id="编译文件说明"><a href="#编译文件说明" class="headerlink" title="编译文件说明"></a>编译文件说明</h2><p>编译前的源代码中有xxx.ui文件，可以通过该文件学习其中的界面布局</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230407165943192.png" class="" title="image-20230407165943192"><p>可以通过文本编辑器来打开xxx.ui文件，里面是用xml语言写的布局。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230407170845775.png" class="" title="image-20230407170845775"><p>也可以通过Qt Designer打开该xxx.ui文件，直接来看它的布局</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230407171054333.png" class="" title="image-20230407171054333"><p>不过上述两种都只能是辅助，比较好的还是要看与xxx.ui文件所对应的ui_xxx.h文件，直接看代码来学，再结合Qt Designer里的布局来学比较好，xml语言还是不太熟，而且一般也不会自己写xml来设计布局吧。。。</p><p>而对应的ui_xxx.h文件的生成是靠编译xxx.ui文件产生的，之前我们编译整个项目的时候，它也跟着生成了，编译生成的文件位置就在build文件夹当中</p><p>以Source源码中ccViewer子项目中的ccviewer.ui文件为例，其生成的对应的ui_ccviewer.h文件具体位置为<code>build/ccViewer</code></p><img src="/2023/04/06/CloudCompare-Cmake/image-20230407173005272.png" class="" title="image-20230407173005272"><p>不过根据具体项目的不同，可能具体位置也有点出入，不过都是编译生成再build文件中</p><p>具体的可以通过everything来搜索ui_xxx.h来确定具体的位置</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230407173607288.png" class="" title="image-20230407173607288"><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>测试了一下编译生成的cloudcompare和ccviewer，发现不能读取pcd文件，而且图标也比安装版的糊，不知道为什么。。。</p><p>网上查了下，可能是cmake的时候，有些plug选项没选导致的，我当时编译就按它默认的选项，没多选也没取消选择，下面记录下网上找到的plug选项试一下</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230413162331702.png" class="" title="image-20230413162331702"><p>相比之前默认的选项，多选了上面这两项，再编译的时候提示我要配置</p><p>更正，除了上面两项还选了PCL，我这次先试试只配置PCL看看能不能读取pcd文件</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230421114513526.png" class="" title="image-20230421114513526"><p>配置pcl位置</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230421114707927.png" class="" title="image-20230421114707927"><p>报错力</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230421122132860-1682053102945-1.png" class="" title="image-20230421122132860"><p>可能是我自己重新编译的问题？我重安一遍官方提供的试试</p><p>还真是，我重新配了一下官方安装版就编译通过了</p><p>但之后发现还是没法读取pcd文件，于是这次打算再把PLUGIN_IO_QPDAL选上试试</p><p>结果被QPDAL的安装难倒了，不想搞这个了</p><p>我又查了查好像不需要，还是只用PCL就行，不过可能需要把PCL重新编译一下，然后选个IO之类的东西给激活。</p><p>看了看官方回复，应该不用重新编译PCL，项目里有PCL_IO_PLUGIN，不知道为什么还是不行</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230421163243751.png" class="" title="image-20230421163243751"><p>通过师兄的指引，点开具体的项目文件来查看，发现QPCL_IO_PLUGIN中的文件有报错，而输出又没显示，所以一直都被我忽略了。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230512203546468.png" class="" title="image-20230512203546468"><p>错误提示为”<strong>C++ 命令行错误: 宏定义无效: BOOST_ALL_NO_LIB-DBOOST_ALL_NO_LIB</strong>“</p><p>去查了一下这个问题，通过修改PCL安装目录下cmake目录，里面有个PCLConfig.cmake文件，定位到该文件的第130行。将**if(WIN32 AND NOT MINGW)<strong>替换成</strong>if(WIN32 AND NOT MINGW AND NOT “${BOOST_DEFINITIONS}” MATCHES “BOOST_ALL_NO_LIB”)**。这样就不会报上述错误了。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230512204528335.png" class="" title="image-20230512204528335"><p>但是编译之后还是不行，仍然没法读PCD格式的文件。</p><p>不过插件的位置倒是出现PCL的部分了，也算是一点进步，但还是识别不到PCD格式真不知道是哪里的问题。。。</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230512204107321.png" class="" title="image-20230512204107321"><p>又注意到cmake编译时第一句”Selecting Windows SDK version 10.0.22000.0 to target Windows 10.0.22621.“ </p><img src="/2023/04/06/CloudCompare-Cmake/image-20230512202314854.png" class="" title="image-20230512202314854"><p>我去看了一下确实没安Windows 10.0.22621版本的SDK，然后我又去重新安了一下这个版本的SDK</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230512202833414.png" class="" title="image-20230512202833414"><p>安完这个SDK之后，再来编译发现确实不太一样</p><img src="/2023/04/06/CloudCompare-Cmake/image-20230512203003590.png" class="" title="image-20230512203003590"><p>但最后结果一样的，还是不行，pcd格式识别 不了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CloudCompare，后续简称CC&lt;/p&gt;
&lt;h2 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h2&gt;&lt;h3 id=&quot;Qt5&quot;&gt;&lt;a href=&quot;#Qt5&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="CloudCompare" scheme="http://example.com/tags/CloudCompare/"/>
    
  </entry>
  
  <entry>
    <title>Wamp安装</title>
    <link href="http://example.com/2023/03/21/WampServer-download/"/>
    <id>http://example.com/2023/03/21/WampServer-download/</id>
    <published>2023-03-21T01:55:56.000Z</published>
    <updated>2023-04-06T03:12:33.010Z</updated>
    
    <content type="html"><![CDATA[<p>写这个也是想吐槽一下他这个网站的下载设计</p><p>下面这个是他官方网站的主页，可以看到下面，下面那么大一个黄色按钮，还写着wamp对应的版本号，一眼看上去就是以为点这个下载</p><img src="/2023/03/21/WampServer-download/image-20230321092638643.png" class="" title="image-20230321092638643"><p>然后点击之后就会发现没什么反应，当时还以为是要挂梯子之类的原因，结果检查这个按钮超链接的路径，发现这个按钮链接的是当前页面，也就是说点这个按钮只是不停的跳转到当前页面而已。。。</p><img src="/2023/03/21/WampServer-download/image-20230321093626347.png" class="" title="image-20230321093626347"><p>那么真正的下载按钮在哪里呢？在黄色按钮上面的“DOWNLOADS”部分，点击“SourceForge”，就会前往真正的下载页面。而且其实读一读“DOWNLOADS”部分里的英文也确实说了让我们去”SourceForge“下载。但是吧。。。就挺搞的。。。</p><img src="/2023/03/21/WampServer-download/image-20230321093920065.png" class="" title="image-20230321093920065"><p>下面就是真正的下载页面了，可以直接点击绿色按钮下载最新安装包即可。有其他需求的也可以去下面各个文件夹看一看，看看有没有自己需要的东西。</p><img src="/2023/03/21/WampServer-download/image-20230321094353450.png" class="" title="image-20230321094353450"><p>补充：后面发现点击黄色按钮右下角的”changelog“也可以，会自动跳转到对应版本的下载页面，等待5s后会自动开始下载</p><img src="/2023/03/21/WampServer-download/image-20230321095006509.png" class="" title="image-20230321095006509"><p>题外话，上面说的对应版本指的是64位、32位这个，不是指wamp版本号。因为可以看到黄色按钮明明写着3.2.6，下面小字说的却是3.3.0，然后实际安装时，安装包的版本也是3.3.0的。当然这也没什么所谓，就是吐槽一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这个也是想吐槽一下他这个网站的下载设计&lt;/p&gt;
&lt;p&gt;下面这个是他官方网站的主页，可以看到下面，下面那么大一个黄色按钮，还写着wamp对应的版本号，一眼看上去就是以为点这个下载&lt;/p&gt;
&lt;img src=&quot;/2023/03/21/WampServer-download/i</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Wamp" scheme="http://example.com/tags/Wamp/"/>
    
  </entry>
  
  <entry>
    <title>Qt在线安装包配置国内镜像源</title>
    <link href="http://example.com/2023/03/20/Qt6.4-mirror-download/"/>
    <id>http://example.com/2023/03/20/Qt6.4-mirror-download/</id>
    <published>2023-03-20T13:34:56.000Z</published>
    <updated>2023-04-06T03:10:48.297Z</updated>
    
    <content type="html"><![CDATA[<p>最近在新电脑上重新装Qt6.4，学校的网不太行，安装时总是报错，干脆找了找教程，使用Qt官方的在线安装包配合国内镜像源来安装，这里记录一下。</p><h2 id="Qt在线安装包下载"><a href="#Qt在线安装包下载" class="headerlink" title="Qt在线安装包下载"></a>Qt在线安装包下载</h2><p>他官网的安装包找起来绕过来绕过去，这里正好记录一下。</p><p>打开Qt官网 <a href="https://www.qt.io/">https://www.qt.io/</a> ，找到右上角的 ”Download.Try.“ 点击进入</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320192030545.png" class="" title="image-20230320192030545"><p>进入的新页面拉到最底，找到”Download Qt for open source use”部分，点击”Go open source”进入下一个界面</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320192432884.png" class="" title="image-20230320192432884"><p>在进入的新页面再往下滑，也是快划到底的地方有个”Download the Qt Online Installer” ，点击这个按钮</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320192910732.png" class="" title="image-20230320192910732"><p>本来以为这就开始下载在线安装包了，结果还是进入新页面，点击新页面的这个”Download”，就真的开始下载在线安装包了</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320193314913.png" class="" title="image-20230320193314913"><p>服了，下个在线安装包点了4个download，还都不重样，牛。</p><h2 id="配置国内镜像源"><a href="#配置国内镜像源" class="headerlink" title="配置国内镜像源"></a>配置国内镜像源</h2><p>直接使用这个在线安装包的话，因为资源服务器在国外，难免网不行导致安装时出错，干脆直接配置国内镜像源来安装。</p><p>找到Qt在线安装的存放路径，在空白处“shift+右键”，选择“打开Powershell窗口”</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320194136944.png" class="" title="image-20230320194136944"><p>输入命令<code>.\qt-unified-windows-x64-4.5.2-online.exe --mirror https://mirror.nju.edu.cn/qt</code>，注意该命令前半部分，是自己下载的qt在线安装包的名字，可能不一样，根据自己的情况改一改。</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320194447596.png" class="" title="image-20230320194447596"><p>输完之后回车，会不带任何提示地打开该安装包</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320194827749.png" class="" title="image-20230320194827749"><p>之后就是正常的qt安装过程了，根据自己的需求选就行</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320195018161.png" class="" title="image-20230320195018161"><p>之后就看各自的网速了</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320195149839.png" class="" title="image-20230320195149839"><p>资源下载完之后就开始解压缩，等进度条100%，qt就算是安好了</p><img src="/2023/03/20/Qt6.4-mirror-download/image-20230320203628573.png" class="" title="image-20230320203628573">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在新电脑上重新装Qt6.4，学校的网不太行，安装时总是报错，干脆找了找教程，使用Qt官方的在线安装包配合国内镜像源来安装，这里记录一下。&lt;/p&gt;
&lt;h2 id=&quot;Qt在线安装包下载&quot;&gt;&lt;a href=&quot;#Qt在线安装包下载&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习心得</title>
    <link href="http://example.com/2023/03/16/SpringBoot/"/>
    <id>http://example.com/2023/03/16/SpringBoot/</id>
    <published>2023-03-16T13:14:39.000Z</published>
    <updated>2023-03-20T12:51:19.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面写了个Vue的学习心得，马上就想起来跟Vue前端技术配合的后端技术SpringBoot好像好久没用了，感觉也需要写个Blog总结一下，不然以后真忘了无从下手就乐了。不过也不至于，当时就是照着YouTube一个教程学得，那教程还不错，大不了再看看那个视频，就是时间可能有点长。还是找时间写一写，加深一下印象吧。</p><p>就以之前写的仓库管理系统为例，大概介绍一下项目结构，每个文件干什么的，再写写经常配合使用，操作数据的MyBatis-Plus的使用，包括自定义功能之类的。</p><p>干脆也可以把Thymeleaf也介绍一下。</p><p>感觉叫学习心得也不大对，我是学完了（也不对，学了一点吧），在用的时候得出的一些心得。那叫使用心得吧，也不大对，你那才用了多点功能啊。。。就当是在使用中深入学习的意思吧，就叫学习心得算了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面写了个Vue的学习心得，马上就想起来跟Vue前端技术配合的后端技术SpringBoot好像好久没用了，感觉也需要写个Blog总结一下，不</summary>
      
    
    
    
    <category term="后端技术学习" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="MyBatis-Plus" scheme="http://example.com/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Vue互动教程学习</title>
    <link href="http://example.com/2023/03/16/Vue-Interactive-Tutorial/"/>
    <id>http://example.com/2023/03/16/Vue-Interactive-Tutorial/</id>
    <published>2023-03-16T12:02:38.000Z</published>
    <updated>2023-03-20T12:51:19.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue，易学易用，性能出色，适用场景丰富的 Web 前端框架。 </p><p>以上为官网给出的精炼概括，之前本科实习期间的项目是用Vue+SpringBoot来前后端分离地开发一个项目，就是那会儿接触到原来还有这么个东西。但是那会儿在忙考研，对搞前端又没有兴趣，所以当时分工的时候选择了后端开发，稍微学了学SpringBoot。而对前端开发技术Vue便是毫不关心，一点没学，现在想想也有点可惜，毕竟当时实习期间那个教程我感觉挺好的，应该是有很多干货的。</p><p>现在之所以想学Vue了，是发现想自己搞点Web项目的时候，只会后端技术完全不够，前端没有人给你写，只能去找别人的模板，然后用Thymeleaf来前后端交互，感觉不够自由，不够灵活。前端嘛，感觉还是根据自己的需求来设计比较好，到时候跟自己写的后端搭配应该也更方便些。</p><p>当然，以上还是我的幻想，Vue还没开始学，不知道到时候设计前端的这个难度具体到底如何。美好的幻想：想要个什么样的前端界面，都能给他弄出来，不求那种花里胡哨的，就基本功能能实现，界面设计得能好看点也就心满意足了。</p><p>下面开始Vue的学习，主要是看Vue的官网 <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p>里面有比较详细的介绍了Vue的基本组件等。。。应该是吧，我也还没仔细看</p><p>这里主要是想介绍一下官网提供的一个互动教程<a href="https://cn.vuejs.org/tutorial/#step-1">https://cn.vuejs.org/tutorial/#step-1</a></p><p>该教材支持边教边实践，左边教着内容，右边给你地方写代码让你试。下面的内容主要围绕跟着这个互动教程学习过程的心得。</p><h2 id="互动教程"><a href="#互动教程" class="headerlink" title="互动教程"></a>互动教程</h2><h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><h3 id="Attribute绑定"><a href="#Attribute绑定" class="headerlink" title="Attribute绑定"></a>Attribute绑定</h3><p>Attribute绑定，<code>v-bind</code>指令，拿<code>div</code>举例<code>&lt;div v-bind:id=&quot;dynamicID&quot;&gt;&lt;/div&gt;</code>，其中的<code>v-bind</code>一简写，就变成了<code>&lt;div :id=&quot;dynamicID&quot;&gt;&lt;/div&gt;</code>，就剩个冒号了，这一般还真不知道是个什么意思，也没法查起。</p><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>事件监听，<code>v-on</code>指令，拿<code>button</code>举例<code>&lt;button v-on:click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</code>，可以简写为<code>&lt;button @click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</code>，这种@的写法我感觉还真见过不少，当时没学不知道是什么意思，原来是事件监听<code>v-on</code>的缩写。</p><h2 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h2><p>写这个blog另一个很大的原因是，就是想找个地方感慨一下这个事儿。</p><p>当时本科实习期间老师还是教着我们用Vue Cli这个脚手架，到现在我再回头想学Vue想着看看Cli脚手架的时候发现它已经进入维护状态，官方不再推荐了。现在官方推荐了新的Vue脚手架Vite，该脚手架也是Vue的作者写的。</p><p>就是想感慨一下这技术发展是真快啊感觉，不过前面也说了，实习那会儿Vue我就基本没学，更不用说这个Vue Cli脚手架了，直接转去学新的脚手架Vite毫无负担，血赚，哎嘿。但没仔细学当时的Vue教程，血亏，嘤。</p><p>话说这样我之前搭的Vue Cli脚手架就白搭了，等着看看Vite脚手架的搭建有没有什么主意的地方，有的好也可以写个Blog，写写使用心得之类的，到时候就把这部分内容移过去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Vue，易学易用，性能出色，适用场景丰富的 Web 前端框架。 &lt;/p&gt;
&lt;p&gt;以上为官网给出的精炼概括，之前本科实习期间的项目是用Vue+</summary>
      
    
    
    
    <category term="前端技术学习" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Qt项目的文件结构</title>
    <link href="http://example.com/2023/03/16/Qt-Project-Structure/"/>
    <id>http://example.com/2023/03/16/Qt-Project-Structure/</id>
    <published>2023-03-16T02:50:11.000Z</published>
    <updated>2023-03-20T12:51:19.123Z</updated>
    
    <content type="html"><![CDATA[<p>之前新建Qt项目看它那个代码，总是感觉怪怪的，直到今天在问ChatGPT关于Qt6和OCC7.6的配合时，它给出了一个Qt+OCC的显示模型的例程，看了这个之后我感觉对Qt程序的创建执行才算理解了一点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QWidget&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QVBoxLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QGraphicsScene&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QGraphicsView&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;OpenGl_GraphicDriver.hxx&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;V3d_View.hxx&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;AIS_InteractiveContext.hxx&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;BRepPrimAPI_MakeSphere.hxx&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 初始化 Qt 应用程序</span><br>    <span class="hljs-function">QApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>    <span class="hljs-comment">// 创建主窗口</span><br>    QWidget window;<br>    window.setWindowTitle(<span class="hljs-string">&quot;OCC and Qt Integration&quot;</span>);<br>    window.resize(<span class="hljs-number">640</span>, <span class="hljs-number">480</span>);<br><br>    <span class="hljs-comment">// 创建图形场景和视图</span><br>    QGraphicsScene scene;<br>    <span class="hljs-function">QGraphicsView <span class="hljs-title">view</span><span class="hljs-params">(&amp;scene)</span></span>;<br>    view.setViewport(<span class="hljs-keyword">new</span> QOpenGLWidget());  <span class="hljs-comment">// 使用 OpenGL 视口</span><br><br>    <span class="hljs-comment">// 创建 OCC 视图</span><br>    Handle(OpenGl_GraphicDriver) aDriver = <span class="hljs-keyword">new</span> OpenGl_GraphicDriver();<br>    Handle(V3d_View) aView = <span class="hljs-keyword">new</span> V3d_View(aDriver);<br>    Handle(AIS_InteractiveContext) aContext = <span class="hljs-keyword">new</span> AIS_InteractiveContext(aView);<br>    aView-&gt;SetContext(aContext);<br><br>    <span class="hljs-comment">// 创建 OCC 对象并将其添加到场景中</span><br>    <span class="hljs-function">BRepPrimAPI_MakeSphere <span class="hljs-title">aSphere</span><span class="hljs-params">(<span class="hljs-number">50</span>)</span></span>;<br>    TopoDS_Shape aShape = aSphere.Shape();<br>    Handle(AIS_Shape) anAisShape = <span class="hljs-keyword">new</span> AIS_Shape(aShape);<br>    aContext-&gt;Display(anAisShape, Standard_True);<br>    aContext-&gt;UpdateCurrentViewer();<br><br>    <span class="hljs-comment">// 将 OCC 视图绑定到 Qt 视图中</span><br>    aView-&gt;SetWindow(view.winId());<br>    aView-&gt;MustBeResized();<br>    view.show();<br><br>    <span class="hljs-comment">// 将 Qt 视图添加到主窗口中</span><br>    QVBoxLayout layout;<br>    layout.addWidget(&amp;view);<br>    window.setLayout(&amp;layout);<br>    window.show();<br><br>    <span class="hljs-comment">// 运行 Qt 应用程序</span><br>    <span class="hljs-keyword">return</span> app.exec();<br>&#125;<br></code></pre></td></tr></table></figure><p>重点不在如何显示OCC模型，而在于该程序是标准的从int main（）主函数来构建程序的写法。从中我们可以加深对Qt代码的真实执行过程的理解。</p><p>将上面的代码与下面新建的Qt项目所给出的int main（）比较，可以看到只有寥寥几行代码，当初被下面这几行代码整蒙了，寻思这是干嘛呢，但其实对照上面的代码来分析就比较好读懂了。上面把定义窗口组件的代码直接写在主函数main中，而下面这种其实就是把窗口定义之类的代码写到了类里，这里这个类是OCC_QT，然后<code>OCC_QT w;</code>这句其实是调用了该类的默认构造函数，通过构造函数的执行，来实现了窗口的创建等功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;OCC_QT.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QApplication&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    OCC_QT w;<br>    w.show();<br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br></code></pre></td></tr></table></figure><p>下面来看OCC_QT这个类，先看头文件OCC_QT.h，这里就是类的声明，其中构造函数<code>OCC_QT(QWidget *parent = nullptr);</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QMainWindow&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_OCC_QT.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OCC_QT</span> :</span> <span class="hljs-keyword">public</span> QMainWindow<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    OCC_QT(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~OCC_QT();<br><br><span class="hljs-keyword">private</span>:<br>    Ui::OCC_QTClass ui;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>我们可以看到它引入了一个头文件“ui_OCC_QT.h”，这里面就是窗口组件相关的代码</p><p>具体来看“ui_OCC_QT.h”，这里面定义了各种窗口组件的代码，包括页面组件的声明、布局的位置等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/********************************************************************************</span><br><span class="hljs-comment">** Form generated from reading UI file &#x27;OCC_QT.ui&#x27;</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">** Created by: Qt User Interface Compiler version 6.4.0</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">** WARNING! All changes made in this file will be lost when recompiling UI file!</span><br><span class="hljs-comment">********************************************************************************/</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> UI_OCC_QT_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UI_OCC_QT_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtCore/QVariant&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QMainWindow&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QMenuBar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QStatusBar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QToolBar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QWidget&gt;</span></span><br><br>QT_BEGIN_NAMESPACE<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ui_OCC_QTClass</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    QMenuBar *menuBar;<br>    QToolBar *mainToolBar;<br>    QWidget *centralWidget;<br>    QStatusBar *statusBar;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setupUi</span><span class="hljs-params">(QMainWindow *OCC_QTClass)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (OCC_QTClass-&gt;objectName().isEmpty())<br>            OCC_QTClass-&gt;setObjectName(<span class="hljs-string">&quot;OCC_QTClass&quot;</span>);<br>        OCC_QTClass-&gt;resize(<span class="hljs-number">600</span>, <span class="hljs-number">400</span>);<br>        menuBar = <span class="hljs-keyword">new</span> QMenuBar(OCC_QTClass);<br>        menuBar-&gt;setObjectName(<span class="hljs-string">&quot;menuBar&quot;</span>);<br>        OCC_QTClass-&gt;setMenuBar(menuBar);<br>        mainToolBar = <span class="hljs-keyword">new</span> QToolBar(OCC_QTClass);<br>        mainToolBar-&gt;setObjectName(<span class="hljs-string">&quot;mainToolBar&quot;</span>);<br>        OCC_QTClass-&gt;addToolBar(mainToolBar);<br>        centralWidget = <span class="hljs-keyword">new</span> QWidget(OCC_QTClass);<br>        centralWidget-&gt;setObjectName(<span class="hljs-string">&quot;centralWidget&quot;</span>);<br>        OCC_QTClass-&gt;setCentralWidget(centralWidget);<br>        statusBar = <span class="hljs-keyword">new</span> QStatusBar(OCC_QTClass);<br>        statusBar-&gt;setObjectName(<span class="hljs-string">&quot;statusBar&quot;</span>);<br>        OCC_QTClass-&gt;setStatusBar(statusBar);<br><br>        retranslateUi(OCC_QTClass);<br><br>        QMetaObject::connectSlotsByName(OCC_QTClass);<br>    &#125; <span class="hljs-comment">// setupUi</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">retranslateUi</span><span class="hljs-params">(QMainWindow *OCC_QTClass)</span></span><br><span class="hljs-function">    </span>&#123;<br>        OCC_QTClass-&gt;setWindowTitle(QCoreApplication::translate(<span class="hljs-string">&quot;OCC_QTClass&quot;</span>, <span class="hljs-string">&quot;OCC_QT&quot;</span>, <span class="hljs-literal">nullptr</span>));<br>    &#125; <span class="hljs-comment">// retranslateUi</span><br><br>&#125;;<br><br><span class="hljs-keyword">namespace</span> Ui &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OCC_QTClass</span>:</span> <span class="hljs-keyword">public</span> Ui_OCC_QTClass &#123;&#125;;<br>&#125; <span class="hljs-comment">// namespace Ui</span><br><br>QT_END_NAMESPACE<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// UI_OCC_QT_H</span></span><br></code></pre></td></tr></table></figure><p>补充一点关于上面部分代码的理解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">namespace</span> Ui &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OCC_QTClass</span>:</span> <span class="hljs-keyword">public</span> Ui_OCC_QTClass &#123;&#125;;<br>&#125; <span class="hljs-comment">// namespace Ui</span><br></code></pre></td></tr></table></figure><p>这段代码声明了一个命名空间Ui，并在里面定义了一个新的类OCC_QTClass来继承上面具体实现功能的类Ui_OCC_QTClass，然后OCC_QT.h中，声明窗口类的时候：<code>Ui::OCC_QTClass ui;</code>，用的也是这个新建的OCC_QTClass类，至于为什么要这么干，我猜可能是进一步提高代码的封装性，提高项目的安全性。</p><p>最后再来看OCC_QT.cpp，这里面就是OCC_QT类的各种函数功能的具体实现。这里别看这个构造函数就一句话，当时我也懵了一下，寻思这怎么就能把窗口之类的东西都弄出来了？现在懂了，就像上面说的，窗口之类的代码实现实际上都在上面ui_OCC_QT.h里，所以cpp这里的构造函数只需要调用一下setupUi（）函数，把窗口布局的代码运行一下即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;OCC_QT.h&quot;</span></span><br><br>OCC_QT::OCC_QT(QWidget *parent)<br>    : QMainWindow(parent)<br>&#123;<br>    ui.setupUi(<span class="hljs-keyword">this</span>);<br>&#125;<br><br>OCC_QT::~OCC_QT()<br>&#123;&#125;<br><br></code></pre></td></tr></table></figure><p>分析完这个OCC_QT类，再来看主函数的代码就很好理解了，调用OCC_QT的构造函数将窗口组件都定义好了，之后再使用w.show()函数显示在w这个类中声明与定义的窗口即可。其中这个show()函数我们注意到并没有定义在OCC_QT类中，它应该是继承自QMainWindow的方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;OCC_QT.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QtWidgets/QApplication&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    OCC_QT w;<br>    w.show();<br>    <span class="hljs-keyword">return</span> a.exec();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后大致总结一下新建的这个Qt项目，它在执行时所做的一些工作：</p><p>定义了UI界面类Ui_OCC_QTClass，写在“ui_OCC_QT.h”中，其中有窗口各种组件的声明和布局定义，与槽函数的连接也默认写在这里面，又定义了一个新的类OCC_QTCLass继承Ui_OCC_QTClass作为访问接口。定义了窗口类OCC_QT，声明部分写在“OCC_QT.h”里，声明了OCC_QTClass类的对象ui，之后的槽函数声明也写在该文件里；定义部分写在“OCC_QT.cpp”里，构造函数调用ui.setup（）函数对窗口组件进行实现，之后的槽函数定义也写在该文件里。</p><p>有了上述这些类的定义，之后就是在主函数中使用，主函数main声明了OCC_QT类的对象w，并调用其构造函数，该构造函数调用OCC_QTClass的实例ui的setup函数，对窗口组件进行声明和定义，即对窗口各组件进行实现。之后再调用OCC_QT的父类QMainWindow继承来的show（）函数将窗口显示出来。</p><p>了解了Qt项目的这些结构之后，我们对Qt项目代码的执行过程就有了基本的了解，就可以更好地编写自己的Qt项目。</p><p>可以就依赖它给出的这种结构来写，也可以按自己想法来写不按它上面的这种结构，步骤对了就行。</p><p>后记：槽函数的声明、定义、与信号的连接等基本步骤见后续的Qt学习笔记，想记录一下两种方式，一种是配合Qt Designer的可视化编程，一种就是纯代码开发的方式。在第一种方式里，想着用上上面说的Qt项目自带的这种文件结果，把OCC_QT.h，OCC_QT.cpp，ui_OCC_QT.h三个文件都用上。在第二中纯代码的方式里，就不要这个ui_OCC_QT.h文件了，毕竟这个文件其实是为了配合Qt Designer可视化编程而存在的，把里面的组件声明、定义等代码都放到外面来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前新建Qt项目看它那个代码，总是感觉怪怪的，直到今天在问ChatGPT关于Qt6和OCC7.6的配合时，它给出了一个Qt+OCC的显示模型的例程，看了这个之后我感觉对Qt程序的创建执行才算理解了一点。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Qt学习" scheme="http://example.com/categories/Qt%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>更改PyCharm缓存路径</title>
    <link href="http://example.com/2023/03/15/PyCharm-Cache/"/>
    <id>http://example.com/2023/03/15/PyCharm-Cache/</id>
    <published>2023-03-15T09:19:46.000Z</published>
    <updated>2023-03-20T12:51:19.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="越来越小的C盘"><a href="#越来越小的C盘" class="headerlink" title="越来越小的C盘"></a>越来越小的C盘</h2><p>最近C盘的空间越来越小了，于是便又开始找找有没有什么能删的垃圾文件。</p><p>推荐一个软件“SpaceSniffer”，它可以扫描分析每个盘里面各个文件所占的大小，我用他扫描了一下我的C盘结果看到用户目录下的PyCharm文件夹里有个文件“content.dat.storage.data”有4.4个G的大小。</p><img src="/2023/03/15/PyCharm-Cache/image-20230315192453628.png" class="" title="image-20230315192453628"><p>网上一查是PyCharm的缓存文件，补充一下，该文件存放在Caches文件夹里，Cache一般就是指缓存文件夹，用来存缓存文件的，当时没反应过来，不过就算直到Cache放缓存文件可能也还是查一查确认一下放心。</p><p>这个缓存文件可以直接删除。但删除并不能从根源解决问题，因为下次使用PyCharm还是会生成缓存文件，早晚还是会一点一点挤占C盘的位置，所以最好的办法就是给PyCharm换一个缓存路径。</p><h2 id="更换PyCharm缓存路径"><a href="#更换PyCharm缓存路径" class="headerlink" title="更换PyCharm缓存路径"></a>更换PyCharm缓存路径</h2><p>找到PyCharm的安装目录下的bin文件夹，如<code>E:\PyCharm Community Edition 2022.3.2\bin</code>，找到其中的idea.properties文件</p><img src="/2023/03/15/PyCharm-Cache/image-20230315193543798.png" class="" title="image-20230315193543798"><p>打开该文件，修改其中的四处位置，推荐用“NotePad++”打开。当然，记事本，VS Code之类的都可以。</p><img src="/2023/03/15/PyCharm-Cache/image-20230315194055634.png" class="" title="image-20230315194055634"><p>上面红框就是我们要修改的部分，它注释掉的语句应该是它本来默认的存放路径，不过可能因为注释掉了，所以其实并没有存在这个路径中，但还是在C盘建了别的文件夹来放这些文件。我们将这些路径改为我们想让它存放的路径。我在PyCharm的安装目录下新建了一个”.PyCharmCE2022.3”文件夹，并将这个路径改到了该文件夹下。</p><ul><li>修改config路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># idea.config.path=$&#123;user.home&#125;/.PyCharmCE/config</span><br>idea.config.path=E:/PyCharm Community Edition 2022.3.2/.PyCharmCE2022.3/config<br></code></pre></td></tr></table></figure><ul><li>修改system路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># idea.system.path=$&#123;user.home&#125;/.PyCharmCE/system</span><br>idea.system.path=E:/PyCharm Community Edition 2022.3.2/.PyCharmCE2022.3/system<br></code></pre></td></tr></table></figure><ul><li>修改plugins路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># idea.plugins.path=$&#123;idea.config.path&#125;/plugins</span><br>idea.plugins.path=E:/PyCharm Community Edition 2022.3.2/.PyCharmCE2022.3/plugins<br></code></pre></td></tr></table></figure><ul><li>修改log路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># idea.log.path=$&#123;idea.system.path&#125;/log</span><br>idea.log.path=E:/PyCharm Community Edition 2022.3.2/.PyCharmCE2022.3/<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>之后重启PyCharm，它会自动检测之前的配置所在位置，并提示导入之前的配置</p><img src="/2023/03/15/PyCharm-Cache/image-20230315212412556.png" class="" title="image-20230315212412556"><p>点击ok就行了，然后就可以把之前C盘里的都删掉了。</p><p>不过因为前面提到的，它配置文件里那四个部分都默认是注释掉的，所以它实际存放的位置是在C盘别的位置，我的位置是在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">C:\Users\REINHARDT\AppData\Local\JetBrains\PyCharmCE2022.3<br>C:\Users\REINHARDT\AppData\Roaming\JetBrains\PyCharmCE2022.3<br></code></pre></td></tr></table></figure><p>不过删完那个4.4G的缓存文件之后我看这两占内存也不是很大我就没删，以防之后发现上面的配置方法有问题，我好回来找。不过一般也没问题，咬咬牙删了也没事。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;越来越小的C盘&quot;&gt;&lt;a href=&quot;#越来越小的C盘&quot; class=&quot;headerlink&quot; title=&quot;越来越小的C盘&quot;&gt;&lt;/a&gt;越来越小的C盘&lt;/h2&gt;&lt;p&gt;最近C盘的空间越来越小了，于是便又开始找找有没有什么能删的垃圾文件。&lt;/p&gt;
&lt;p&gt;推荐一个软件“S</summary>
      
    
    
    
    <category term="C盘减负" scheme="http://example.com/categories/C%E7%9B%98%E5%87%8F%E8%B4%9F/"/>
    
    
    <category term="PyCharm" scheme="http://example.com/tags/PyCharm/"/>
    
  </entry>
  
  <entry>
    <title>PCL1.12.1+VS2022+Qt6.4 配置</title>
    <link href="http://example.com/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/"/>
    <id>http://example.com/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/</id>
    <published>2023-03-13T13:07:58.000Z</published>
    <updated>2023-03-24T08:17:51.600Z</updated>
    
    <content type="html"><![CDATA[<p>本教程分为两部分，第一部分为PCL+VS的配置，第二部分为PCL+VS+QT的配置。</p><p>如果只是要在VS用用PCL，学习一下PCL点云库，只看第一部分PCL+VS的配置即可。</p><p>而如果还需要配合QT做界面，相关的配置会在第二部分PCL+VS+QT的配置中介绍。</p><h1 id="PCL-VS-配置"><a href="#PCL-VS-配置" class="headerlink" title="PCL+VS 配置"></a>PCL+VS 配置</h1><h2 id="PCL安装"><a href="#PCL安装" class="headerlink" title="PCL安装"></a>PCL安装</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>PCL（Point Cloud Library）官方网站 <a href="https://pointclouds.org/">https://pointclouds.org/</a></p><p>官方github网站 <a href="https://github.com/PointCloudLibrary/pcl">https://github.com/PointCloudLibrary/pcl</a></p><p>PCL官方的github提供了各种版本的PCL源码，同时还提供了已经编译好的PCL供使用。</p><p>解释一下，PCL正常来配置的话，是需要自己安装PCL依赖的第三方库，一般有Boost、Eigen、FLANN、OpenNI2、Qhull、VTK，我们需要将这些第三方库从各自官网下载下来，分别用Cmake编译好，然后再编译PCL的源码，因为PCL编译时要依赖上述第三库编译出的文件，包括库文件（library）等二进制文件。这样的优势在于编译PCL的时候可以自选PCL的一些组件，比如可以指定PCL的GPU加速模块（默认是不带的），还可以指定要与Qt6配合使用，它应该就会在编译时往与Qt6适配这方面有进一步的优化。但缺点就是麻烦，要把上面每一个第三方库都安装编译一遍可不是一般的麻烦，而且各个第三方库版本之间的兼容性、适配度也需要自己摸索。</p><p>所以官方也提供了已经完全编译好的PCL安装包供我们使用，该安装包包含上述的所有第三方库编译好的文件，以及依赖它们所编译好的PCL文件。当然，官方提供的这种安装包得到的PCL只提供了最基本的功能，不含GPU模块等扩展。而且其中所带的第三库也都是最基本的配置，就比如其中自带的VTK，就没有针对Qt6做额外的配置，缺少与Qt6配合所需的文件。</p><p>因此，个人认为，最佳的PCL配置安装路线是，1、先使用官方提供的AllInOn安装包，就是之前提过的官方提供的自带编译好的第三方库及编译好的PCL的安装包。补充一下，这个安装包自带的第三方库安好后，从各自的文件夹名字基本能得知每个第三库的版本，即我们可以从中得知当前PCL版本要与第三方库的哪些版本配合兼容性好。2、根据自己的需求，自己安装编译对应版本的第三方库，并用它替换掉PCL自带的对应部分的第三方库。就比如，我要使用VTK配合Qt的组件，而PCL自带的VTK显然不带与Qt配合的部分。因此我去VTK官网自己下一个VTK源码，并自己编译，编译时配置与Qt配合，那我得到的编译后的文件就带有我所需的与Qt配合的部分。之后我用我自己编译好的VTK文件（包括bin、lib、include等），把PCL自带的VTK的这些文件都替换掉。当然，如果没有这类需求，只是想自己编译一下PCL，比如自己编译PCL增加一个GPU模块，那这第2步就没有必要。3、前面是编译PCL的准备步骤，准备好PCL编译所依赖的第三方库文件（编译好的），下面就是编译PCL，去官网下载对应版本的PCL源码，使用CMake编译即可，编译的时候绑定好这些第三方库的位置、选好要用的PCL模块。具体操作见本教程第二部分“PCL+VS+QT 配置” 。</p><h3 id="官方编译版安装"><a href="#官方编译版安装" class="headerlink" title="官方编译版安装"></a>官方编译版安装</h3><p>下面开始官方编译版PCL的安装教程，因为如果只是配合VS来学习PCL库，安这个也就够用了，有进一步的自定义需求的可以接着看第二部分。</p><p>在官方github网站（PCL项目）的右侧找到Releases部分</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230314105408267.png" class="" title="image-20230314105408267"><p>他这里把最新的版本放在前面，可以看到是PCL1.13.0版本，如果想安装其他版本就点“+30 releases”去找自己想安的版本，因为我之前安装的是PCL1.12.1，所以我还是以该版本为例来写。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230314113236986.png" class="" title="image-20230314113236986"><p>点开相应版本下的“Assets”，就能看到具体提供的安装资源，其中的AllInOne安装包就是官方提供的编译好的第三方库及PCL文件。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230314113530623.png" class="" title="image-20230314113530623"><p>之后点击安装即可，这里提点安装时的个人小建议，一是选择添加环境变量到PATH，能为后面配环境变量省一点事儿</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230314154142517.png" class="" title="image-20230314154142517"><p>然后是选择安装路径的时候，官方自动给的路径中“PCL 1.12.1”里面有个空格，为了方便后续编译PCL时的方便，建议把这个空格去掉，或是换成下划线之类的，总之路径里最后不要有空格，中文最好也别有（这个没试过，可能没事）</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230314155403828.png" class="" title="image-20230314155403828"><p>重要！！！后来我发现相比下划线”PCL_1.12.1”，用横杠更好看”PCL-1.12.1”，仅供参考。<span style="background:#000000;color:black">等之后找个空把我要把这些路径名都改过来。</span></p><p>然后在安装过程中如果之前没有安装过OpenNI2，会弹出窗口问是否安装OpenNI2，点击安装即可。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323170801047.png" class="" title="image-20230323170801047"><p> 比较坑的是，这个OpenNI2一般不会老老实实按照我们PCL安装路径安装，而是安装在C盘。不过也不用在意，等PCL安装程序全部安装完成后，找到安装目录\PCL_1.12.1\3rdParty，该目录下就是PCL官方为我们打包好的，编译好的第三方库</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323170910862.png" class="" title="image-20230323170910862"><p>打开其中的OpenNI2目录，如果里面是空的，只有一个OpenNI-Windows-x64-2.2.msi文件，那恭喜，这东西成功安到C盘去了。。。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323171100553.png" class="" title="image-20230323171100553"><p>但不用担心，这个msi文件就是OpenNI2的安装文件，我们可以通过它，把安在C盘的OpenNI2卸载</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323171136795.png" class="" title="image-20230323171136795"><p>然后再通过这个msi把它安装回来，主要是因为通过这个msi文件来安装的时候，它会让你选安装路径，我们就把安到\PCL_1.12.1\3rdParty\OpenNI2路径，这样就让PCL的第三库整整齐齐在一起了。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323171343610.png" class="" title="image-20230323171343610"><p>现在再看OpenNI2的文件夹，这就正常了。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323171445487.png" class="" title="image-20230323171445487"><p>当然，不介意OpenNI2安在C盘，与其他第三方库天各一方的话，就不用把它卸了又装。</p><p>现在打开系统环境变量来看一下，因为我们之前选择了添加PCL环境变量到PATH，所以这里已经自动帮我们配好了一部分。</p><p>在系统变量里帮我们配好了OPENNI2的三个相关变量（外：PCL_ROOT,OpenNI2三项；Path内：PCL/bin，VTK/bin）</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323171638424.png" class="" title="image-20230323171638424"><p>在Path里帮我们配好了最基本的PCL和VTK的bin路径</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323194457597.png" class="" title="image-20230323194457597"><p>除了他帮我们配好的这一部分，我们还需要把其他第三方库跟dll有关的路径添加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">%PCL_ROOT%\3rdParty\FLANN\bin<br>%PCL_ROOT%\3rdParty\Qhull\bin<br>%PCL_ROOT%\3rdParty\OpenNI2\Tools<br>%PCL_ROOT%\3rdParty\OpenNI2\Redist<br></code></pre></td></tr></table></figure><p>另外因为他给我们配好PCL_ROOT了，可以直接拿来用</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323235808375.png" class="" title="image-20230323235808375"><p>一开始我以为我没用到上面的模块，这些环境变量没必要加，结果不加它们在运行的时候报了缺少OpenNI2.dll的错误，所以我估计虽然没有直接使用这些第三方库，但PCL毕竟是依赖它们编译出来的，在运行时估计还是需要用到这些东西，所以还是把上面这些都加到环境变量里吧。</p><p>对了，既然说到这了，提供一种程序运行时出现缺少xxx.dll文件时的解决思路</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230315105857343.png" class="" title="image-20230315105857343"><p>这种一般就是程序调试的时候找不到相关的dll导致的<span style="background:#000000;color:black">（废话。。。）</span>，所以我们首先要找到这个dll的位置，还是通过之前的软件“everything”，查找到这个dll所在位置</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230315110129274.png" class="" title="image-20230315110129274"><p>之后有两种办法 ，一是直接将这个dll文件复制到程序运行目录下，二是将这个dll文件所在的路径添加到环境变量Path中，然后在VS的调试属性中告诉它去哪里找这些dll文件。上面这么多路径，选一个加到环境变量里即可。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230315110339388.png" class="" title="image-20230315110339388"><p>在这个例子里，通过网上的参考，只要把下面两个路径加到环境变量里，应该就包含OpenNI2所需的所有dll文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">%PCL_ROOT%\3rdParty\OpenNI2\Tools<br>%PCL_ROOT%\3rdParty\OpenNI2\Redist<br></code></pre></td></tr></table></figure><p>而在不知道哪个路径里包含程序运行所需的所有dll文件的情况下，就只能是缺一个，找个一路径加一下这样。。。当然，因为你加的路径里包含多个dll文件，在有多个dll路径可选的时候，是有可能你选的那个路径，就是包含你当前程序运行所需的所有dll文件的路径。提这个就是想说，选哪个路径加到环境变量里的时候，还是可以稍微思考一下的，哎嘿。</p><p>题外话，不过让我纳闷的是，上面配置的所有PCL相关环境时，里面没有Boost相关的环境变量，甚至我程序中都显式地使用了Boost相关的代码，它也没报过缺少dll文件的错。而且其实在第三方库Boost的安装路径\PCL_1.12.1\3rdParty\Boost里，可以看到是没有bin文件夹的，找了找也没有像OpenNI2那样把dll分散到别的文件夹里，Boost好像就是没有dll文件。看样Boost在使用时跟别人都不一样，不需要这个dll文件就能用。这一段是见识短的我的一点小感慨，等我见识长了，看看能不能有什么新的认识补充。</p><h2 id="VS配置"><a href="#VS配置" class="headerlink" title="VS配置"></a>VS配置</h2><p>跟之前OCC在VS中的配置类似，主要三个部分。让程序能找到bin里的dll文件，找到inc里的.h头文件，找到lib里的lib库函数。</p><p>如何让程序能找到bin里的dll文件在上面已经给出了，就是在属性页的 “调试–&gt;环境” 里添加<code>PATH=%PATH%</code>，不过感觉不加好像也行，一般程序创建的时候都带着。</p><p>让程序能找到头文件，添加PCL所有关联的头文件目录。找到 属性页 -&gt; “C/C++” -&gt; “常规”-&gt;”附加包含目录”，把这些头文件路径添加进去即可。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323195932889.png" class="" title="image-20230323195932889"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">E:\PCL_1.12.1\include\pcl-1.12<br>E:\PCL_1.12.1\3rdParty\Boost\include\boost-1_78<br>E:\PCL_1.12.1\3rdParty\Eigen\eigen3<br>E:\PCL_1.12.1\3rdParty\FLANN\include<br>E:\PCL_1.12.1\3rdParty\OpenNI2\Include<br>E:\PCL_1.12.1\3rdParty\Qhull\include<br>E:\PCL_1.12.1\3rdParty\VTK\include\vtk-9.1<br></code></pre></td></tr></table></figure><p>让程序能找到lib文件，找到属性页-&gt;”链接器”-&gt;”常规”-&gt;”附加库目录”，添加lib库位置。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323201452080.png" class="" title="image-20230323201452080"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">E:\PCL_1.12.1\lib<br>E:\PCL_1.12.1\3rdParty\Boost\lib<br>E:\PCL_1.12.1\3rdParty\FLANN\lib<br>E:\PCL_1.12.1\3rdParty\OpenNI2\Lib<br>E:\PCL_1.12.1\3rdParty\Qhull\lib<br>E:\PCL_1.12.1\3rdParty\VTK\lib<br></code></pre></td></tr></table></figure><p>然后还是在链接器部分，找到“输入”-&gt;”附加依赖项”，把上面所有lib库路径下的lib文件名引入到附加依赖项里</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323200946499.png" class="" title="image-20230323200946499"><p>之前配OCC的时候提过了，在每个lib文件夹下，shift+右键，选择打开Powershell窗口，然后通过命令行<code>ls *.lib -n</code>来获取各个文件夹下的所有lib文件名即可。这里直接给出该PCL版本下所以的lib文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br></pre></td><td class="code"><pre><code class="hljs plain">pcl_commond.lib<br>pcl_featuresd.lib<br>pcl_filtersd.lib<br>pcl_iod.lib<br>pcl_io_plyd.lib<br>pcl_kdtreed.lib<br>pcl_keypointsd.lib<br>pcl_mld.lib<br>pcl_octreed.lib<br>pcl_outofcored.lib<br>pcl_peopled.lib<br>pcl_recognitiond.lib<br>pcl_registrationd.lib<br>pcl_sample_consensusd.lib<br>pcl_searchd.lib<br>pcl_segmentationd.lib<br>pcl_stereod.lib<br>pcl_surfaced.lib<br>pcl_trackingd.lib<br>pcl_visualizationd.lib<br>libboost_atomic-vc142-mt-gd-x64-1_78.lib<br>libboost_bzip2-vc142-mt-gd-x64-1_78.lib<br>libboost_chrono-vc142-mt-gd-x64-1_78.lib<br>libboost_container-vc142-mt-gd-x64-1_78.lib<br>libboost_context-vc142-mt-gd-x64-1_78.lib<br>libboost_contract-vc142-mt-gd-x64-1_78.lib<br>libboost_coroutine-vc142-mt-gd-x64-1_78.lib<br>libboost_date_time-vc142-mt-gd-x64-1_78.lib<br>libboost_exception-vc142-mt-gd-x64-1_78.lib<br>libboost_filesystem-vc142-mt-gd-x64-1_78.lib<br>libboost_graph-vc142-mt-gd-x64-1_78.lib<br>libboost_graph_parallel-vc142-mt-gd-x64-1_78.lib<br>libboost_iostreams-vc142-mt-gd-x64-1_78.lib<br>libboost_json-vc142-mt-gd-x64-1_78.lib<br>libboost_locale-vc142-mt-gd-x64-1_78.lib<br>libboost_log-vc142-mt-gd-x64-1_78.lib<br>libboost_log_setup-vc142-mt-gd-x64-1_78.lib<br>libboost_math_c99-vc142-mt-gd-x64-1_78.lib<br>libboost_math_c99f-vc142-mt-gd-x64-1_78.lib<br>libboost_math_c99l-vc142-mt-gd-x64-1_78.lib<br>libboost_math_tr1-vc142-mt-gd-x64-1_78.lib<br>libboost_math_tr1f-vc142-mt-gd-x64-1_78.lib<br>libboost_math_tr1l-vc142-mt-gd-x64-1_78.lib<br>libboost_mpi-vc142-mt-gd-x64-1_78.lib<br>libboost_nowide-vc142-mt-gd-x64-1_78.lib<br>libboost_numpy38-vc142-mt-gd-x64-1_78.lib<br>libboost_prg_exec_monitor-vc142-mt-gd-x64-1_78.lib<br>libboost_program_options-vc142-mt-gd-x64-1_78.lib<br>libboost_python38-vc142-mt-gd-x64-1_78.lib<br>libboost_random-vc142-mt-gd-x64-1_78.lib<br>libboost_regex-vc142-mt-gd-x64-1_78.lib<br>libboost_serialization-vc142-mt-gd-x64-1_78.lib<br>libboost_system-vc142-mt-gd-x64-1_78.lib<br>libboost_test_exec_monitor-vc142-mt-gd-x64-1_78.lib<br>libboost_thread-vc142-mt-gd-x64-1_78.lib<br>libboost_timer-vc142-mt-gd-x64-1_78.lib<br>libboost_type_erasure-vc142-mt-gd-x64-1_78.lib<br>libboost_unit_test_framework-vc142-mt-gd-x64-1_78.lib<br>libboost_wave-vc142-mt-gd-x64-1_78.lib<br>libboost_wserialization-vc142-mt-gd-x64-1_78.lib<br>libboost_zlib-vc142-mt-gd-x64-1_78.lib<br>flann-gd.lib<br>flann_cpp-gd.lib<br>flann_cpp_s-gd.lib<br>flann_s-gd.lib<br>OpenNI2.lib<br>qhullcpp_d.lib<br>qhullstatic_d.lib<br>qhullstatic_rd.lib<br>qhull_rd.lib<br>vtkcgns-9.1.lib<br>vtkcgns-9.1d.lib<br>vtkChartsCore-9.1.lib<br>vtkChartsCore-9.1d.lib<br>vtkCommonColor-9.1.lib<br>vtkCommonColor-9.1d.lib<br>vtkCommonComputationalGeometry-9.1.lib<br>vtkCommonComputationalGeometry-9.1d.lib<br>vtkCommonCore-9.1.lib<br>vtkCommonCore-9.1d.lib<br>vtkCommonDataModel-9.1.lib<br>vtkCommonDataModel-9.1d.lib<br>vtkCommonExecutionModel-9.1.lib<br>vtkCommonExecutionModel-9.1d.lib<br>vtkCommonMath-9.1.lib<br>vtkCommonMath-9.1d.lib<br>vtkCommonMisc-9.1.lib<br>vtkCommonMisc-9.1d.lib<br>vtkCommonSystem-9.1.lib<br>vtkCommonSystem-9.1d.lib<br>vtkCommonTransforms-9.1.lib<br>vtkCommonTransforms-9.1d.lib<br>vtkDICOMParser-9.1.lib<br>vtkDICOMParser-9.1d.lib<br>vtkDomainsChemistry-9.1.lib<br>vtkDomainsChemistry-9.1d.lib<br>vtkDomainsChemistryOpenGL2-9.1.lib<br>vtkDomainsChemistryOpenGL2-9.1d.lib<br>vtkdoubleconversion-9.1.lib<br>vtkdoubleconversion-9.1d.lib<br>vtkexodusII-9.1.lib<br>vtkexodusII-9.1d.lib<br>vtkexpat-9.1.lib<br>vtkexpat-9.1d.lib<br>vtkFiltersAMR-9.1.lib<br>vtkFiltersAMR-9.1d.lib<br>vtkFiltersCore-9.1.lib<br>vtkFiltersCore-9.1d.lib<br>vtkFiltersExtraction-9.1.lib<br>vtkFiltersExtraction-9.1d.lib<br>vtkFiltersFlowPaths-9.1.lib<br>vtkFiltersFlowPaths-9.1d.lib<br>vtkFiltersGeneral-9.1.lib<br>vtkFiltersGeneral-9.1d.lib<br>vtkFiltersGeneric-9.1.lib<br>vtkFiltersGeneric-9.1d.lib<br>vtkFiltersGeometry-9.1.lib<br>vtkFiltersGeometry-9.1d.lib<br>vtkFiltersHybrid-9.1.lib<br>vtkFiltersHybrid-9.1d.lib<br>vtkFiltersHyperTree-9.1.lib<br>vtkFiltersHyperTree-9.1d.lib<br>vtkFiltersImaging-9.1.lib<br>vtkFiltersImaging-9.1d.lib<br>vtkFiltersModeling-9.1.lib<br>vtkFiltersModeling-9.1d.lib<br>vtkFiltersParallel-9.1.lib<br>vtkFiltersParallel-9.1d.lib<br>vtkFiltersParallelImaging-9.1.lib<br>vtkFiltersParallelImaging-9.1d.lib<br>vtkFiltersPoints-9.1.lib<br>vtkFiltersPoints-9.1d.lib<br>vtkFiltersProgrammable-9.1.lib<br>vtkFiltersProgrammable-9.1d.lib<br>vtkFiltersSelection-9.1.lib<br>vtkFiltersSelection-9.1d.lib<br>vtkFiltersSMP-9.1.lib<br>vtkFiltersSMP-9.1d.lib<br>vtkFiltersSources-9.1.lib<br>vtkFiltersSources-9.1d.lib<br>vtkFiltersStatistics-9.1.lib<br>vtkFiltersStatistics-9.1d.lib<br>vtkFiltersTexture-9.1.lib<br>vtkFiltersTexture-9.1d.lib<br>vtkFiltersTopology-9.1.lib<br>vtkFiltersTopology-9.1d.lib<br>vtkFiltersVerdict-9.1.lib<br>vtkFiltersVerdict-9.1d.lib<br>vtkfmt-9.1.lib<br>vtkfmt-9.1d.lib<br>vtkfreetype-9.1.lib<br>vtkfreetype-9.1d.lib<br>vtkGeovisCore-9.1.lib<br>vtkGeovisCore-9.1d.lib<br>vtkgl2ps-9.1.lib<br>vtkgl2ps-9.1d.lib<br>vtkglew-9.1.lib<br>vtkglew-9.1d.lib<br>vtkhdf5-9.1.lib<br>vtkhdf5-9.1d.lib<br>vtkhdf5_hl-9.1.lib<br>vtkhdf5_hl-9.1d.lib<br>vtkImagingColor-9.1.lib<br>vtkImagingColor-9.1d.lib<br>vtkImagingCore-9.1.lib<br>vtkImagingCore-9.1d.lib<br>vtkImagingFourier-9.1.lib<br>vtkImagingFourier-9.1d.lib<br>vtkImagingGeneral-9.1.lib<br>vtkImagingGeneral-9.1d.lib<br>vtkImagingHybrid-9.1.lib<br>vtkImagingHybrid-9.1d.lib<br>vtkImagingMath-9.1.lib<br>vtkImagingMath-9.1d.lib<br>vtkImagingMorphological-9.1.lib<br>vtkImagingMorphological-9.1d.lib<br>vtkImagingSources-9.1.lib<br>vtkImagingSources-9.1d.lib<br>vtkImagingStatistics-9.1.lib<br>vtkImagingStatistics-9.1d.lib<br>vtkImagingStencil-9.1.lib<br>vtkImagingStencil-9.1d.lib<br>vtkInfovisCore-9.1.lib<br>vtkInfovisCore-9.1d.lib<br>vtkInfovisLayout-9.1.lib<br>vtkInfovisLayout-9.1d.lib<br>vtkInteractionImage-9.1.lib<br>vtkInteractionImage-9.1d.lib<br>vtkInteractionStyle-9.1.lib<br>vtkInteractionStyle-9.1d.lib<br>vtkInteractionWidgets-9.1.lib<br>vtkInteractionWidgets-9.1d.lib<br>vtkIOAMR-9.1.lib<br>vtkIOAMR-9.1d.lib<br>vtkIOAsynchronous-9.1.lib<br>vtkIOAsynchronous-9.1d.lib<br>vtkIOCGNSReader-9.1.lib<br>vtkIOCGNSReader-9.1d.lib<br>vtkIOChemistry-9.1.lib<br>vtkIOChemistry-9.1d.lib<br>vtkIOCityGML-9.1.lib<br>vtkIOCityGML-9.1d.lib<br>vtkIOCONVERGECFD-9.1.lib<br>vtkIOCONVERGECFD-9.1d.lib<br>vtkIOCore-9.1.lib<br>vtkIOCore-9.1d.lib<br>vtkIOEnSight-9.1.lib<br>vtkIOEnSight-9.1d.lib<br>vtkIOExodus-9.1.lib<br>vtkIOExodus-9.1d.lib<br>vtkIOExport-9.1.lib<br>vtkIOExport-9.1d.lib<br>vtkIOExportGL2PS-9.1.lib<br>vtkIOExportGL2PS-9.1d.lib<br>vtkIOExportPDF-9.1.lib<br>vtkIOExportPDF-9.1d.lib<br>vtkIOGeometry-9.1.lib<br>vtkIOGeometry-9.1d.lib<br>vtkIOHDF-9.1.lib<br>vtkIOHDF-9.1d.lib<br>vtkIOImage-9.1.lib<br>vtkIOImage-9.1d.lib<br>vtkIOImport-9.1.lib<br>vtkIOImport-9.1d.lib<br>vtkIOInfovis-9.1.lib<br>vtkIOInfovis-9.1d.lib<br>vtkIOIOSS-9.1.lib<br>vtkIOIOSS-9.1d.lib<br>vtkIOLegacy-9.1.lib<br>vtkIOLegacy-9.1d.lib<br>vtkIOLSDyna-9.1.lib<br>vtkIOLSDyna-9.1d.lib<br>vtkIOMINC-9.1.lib<br>vtkIOMINC-9.1d.lib<br>vtkIOMotionFX-9.1.lib<br>vtkIOMotionFX-9.1d.lib<br>vtkIOMovie-9.1.lib<br>vtkIOMovie-9.1d.lib<br>vtkIONetCDF-9.1.lib<br>vtkIONetCDF-9.1d.lib<br>vtkIOOggTheora-9.1.lib<br>vtkIOOggTheora-9.1d.lib<br>vtkIOParallel-9.1.lib<br>vtkIOParallel-9.1d.lib<br>vtkIOParallelXML-9.1.lib<br>vtkIOParallelXML-9.1d.lib<br>vtkIOPLY-9.1.lib<br>vtkIOPLY-9.1d.lib<br>vtkIOSegY-9.1.lib<br>vtkIOSegY-9.1d.lib<br>vtkIOSQL-9.1.lib<br>vtkIOSQL-9.1d.lib<br>vtkioss-9.1.lib<br>vtkioss-9.1d.lib<br>vtkIOTecplotTable-9.1.lib<br>vtkIOTecplotTable-9.1d.lib<br>vtkIOVeraOut-9.1.lib<br>vtkIOVeraOut-9.1d.lib<br>vtkIOVideo-9.1.lib<br>vtkIOVideo-9.1d.lib<br>vtkIOXML-9.1.lib<br>vtkIOXML-9.1d.lib<br>vtkIOXMLParser-9.1.lib<br>vtkIOXMLParser-9.1d.lib<br>vtkjpeg-9.1.lib<br>vtkjpeg-9.1d.lib<br>vtkjsoncpp-9.1.lib<br>vtkjsoncpp-9.1d.lib<br>vtkkissfft-9.1.lib<br>vtkkissfft-9.1d.lib<br>vtklibharu-9.1.lib<br>vtklibharu-9.1d.lib<br>vtklibproj-9.1.lib<br>vtklibproj-9.1d.lib<br>vtklibxml2-9.1.lib<br>vtklibxml2-9.1d.lib<br>vtkloguru-9.1.lib<br>vtkloguru-9.1d.lib<br>vtklz4-9.1.lib<br>vtklz4-9.1d.lib<br>vtklzma-9.1.lib<br>vtklzma-9.1d.lib<br>vtkmetaio-9.1.lib<br>vtkmetaio-9.1d.lib<br>vtknetcdf-9.1.lib<br>vtknetcdf-9.1d.lib<br>vtkogg-9.1.lib<br>vtkogg-9.1d.lib<br>vtkParallelCore-9.1.lib<br>vtkParallelCore-9.1d.lib<br>vtkParallelDIY-9.1.lib<br>vtkParallelDIY-9.1d.lib<br>vtkpng-9.1.lib<br>vtkpng-9.1d.lib<br>vtkpugixml-9.1.lib<br>vtkpugixml-9.1d.lib<br>vtkRenderingAnnotation-9.1.lib<br>vtkRenderingAnnotation-9.1d.lib<br>vtkRenderingContext2D-9.1.lib<br>vtkRenderingContext2D-9.1d.lib<br>vtkRenderingContextOpenGL2-9.1.lib<br>vtkRenderingContextOpenGL2-9.1d.lib<br>vtkRenderingCore-9.1.lib<br>vtkRenderingCore-9.1d.lib<br>vtkRenderingFreeType-9.1.lib<br>vtkRenderingFreeType-9.1d.lib<br>vtkRenderingGL2PSOpenGL2-9.1.lib<br>vtkRenderingGL2PSOpenGL2-9.1d.lib<br>vtkRenderingImage-9.1.lib<br>vtkRenderingImage-9.1d.lib<br>vtkRenderingLabel-9.1.lib<br>vtkRenderingLabel-9.1d.lib<br>vtkRenderingLOD-9.1.lib<br>vtkRenderingLOD-9.1d.lib<br>vtkRenderingOpenGL2-9.1.lib<br>vtkRenderingOpenGL2-9.1d.lib<br>vtkRenderingSceneGraph-9.1.lib<br>vtkRenderingSceneGraph-9.1d.lib<br>vtkRenderingUI-9.1.lib<br>vtkRenderingUI-9.1d.lib<br>vtkRenderingVolume-9.1.lib<br>vtkRenderingVolume-9.1d.lib<br>vtkRenderingVolumeOpenGL2-9.1.lib<br>vtkRenderingVolumeOpenGL2-9.1d.lib<br>vtkRenderingVtkJS-9.1.lib<br>vtkRenderingVtkJS-9.1d.lib<br>vtksqlite-9.1.lib<br>vtksqlite-9.1d.lib<br>vtksys-9.1.lib<br>vtksys-9.1d.lib<br>vtkTestingRendering-9.1.lib<br>vtkTestingRendering-9.1d.lib<br>vtktheora-9.1.lib<br>vtktheora-9.1d.lib<br>vtktiff-9.1.lib<br>vtktiff-9.1d.lib<br>vtkverdict-9.1.lib<br>vtkverdict-9.1d.lib<br>vtkViewsContext2D-9.1.lib<br>vtkViewsContext2D-9.1d.lib<br>vtkViewsCore-9.1.lib<br>vtkViewsCore-9.1d.lib<br>vtkViewsInfovis-9.1.lib<br>vtkViewsInfovis-9.1d.lib<br>vtkWrappingTools-9.1.lib<br>vtkWrappingTools-9.1d.lib<br>vtkzlib-9.1.lib<br>vtkzlib-9.1d.lib<br></code></pre></td></tr></table></figure><p>至此，就可以在VS里使用PCL愉快开发了。</p><h1 id="PCL-VS-QT-配置"><a href="#PCL-VS-QT-配置" class="headerlink" title="PCL+VS+QT 配置"></a>PCL+VS+QT 配置</h1><p>之前VS+PCL显示时用的是boost，但要配合Qt的ui界面来显示的话，需要用到VTK的一个组件QVTKOpenGLNativeWidget。使用这个组件需要重新编译VTK，让它生成配合Qt的相关文件。之后用我们新编译出的VTK文件替换PCL自带的VTK文件，再重新编译一下PCL，让PCL生成的文件好和现在的VTK配合起来。</p><h2 id="VTK编译"><a href="#VTK编译" class="headerlink" title="VTK编译"></a>VTK编译</h2><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>去VTK的官网 <a href="https://vtk.org/">https://vtk.org/</a> 下载VTK的源文件。我们注意到PCL自带的VTK版本是9.1的，而官网只提供VTK9.2.6版本的源码了。无需担心，只要VTK的这个大版本一样就行，即都是VTK9的版本即可，别下成下面8.2.0或是7.1.1的版本就行。而且是在要找还是能在GitHub上找到VTK9.1版本的源码的。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323212423100.png" class="" title="image-20230323212423100"><h3 id="CMake编译"><a href="#CMake编译" class="headerlink" title="CMake编译"></a>CMake编译</h3><p>这里正好简单介绍一下使用CMake编译的流程，我们一般会用到3个文件夹，source文件夹用来放之前下载下来的源代码，build文件夹用来放CMake生成的文件，install文件夹用来放最后编译生成的文件。</p><p>这里我创建了一个VTK9.2.6文件夹，并在里面创建了上述三个文件夹，source、build、install</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323213855208.png" class="" title="image-20230323213855208"><p>之后把之前下载的源代码解压到了source文件夹下</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323213838465.png" class="" title="image-20230323213838465"><p>打开CMake的GUI界面，给出源文件路径和build路径，之后点configure</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323214900538.png" class="" title="image-20230323214900538"><p>编译器就用他检测到的我们现在的编译器版本VS2022，下面平台版本选一下x64</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323215046074.png" class="" title="image-20230323215046074"><p>第一次configure之后可以看到界面是红色的，表示这些选项我们还未确认过，这里有几项我们需要进行修改</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323215714672.png" class="" title="image-20230323215714672"><p>修改后结果如下。这个install的路径改成我们之前建的install文件夹，不然一会编译的时候生成的源码都跑到上面C盘的路径下了。然后就是把VTK配合Qt和Views的选项改为yes，之后编译才会生成与Qt配合相关的文件。确认好了之后再点一下Configure</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323220327445.png" class="" title="image-20230323220327445"><p>再次Configure会根据之前的选择而产生新的选项让我们确认，而之前的选项在我们点Configure的时候他就当我们确认好了，就变成白色了，当然变成白色的这些选项还是可以改的。在新出现的这些选项中，我们需要给他选定需要配合的Qt版本，以及对应的Qt文件夹路径。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323221344775.png" class="" title="image-20230323221344775"><p>其中Qt的版本根据自己要用的Qt版本来选，我用Qt6所以版本这里自然选6，然后再告诉它Qt6文件夹的路径。Qt5我不用所以不用管，如果用Qt5的话，照着这个Qt6的路径去找就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">E:\QT6\6.4.3\msvc2019_64\lib\cmake\Qt6<br></code></pre></td></tr></table></figure><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323221614344.png" class="" title="image-20230323221614344"><p>之后再点Configure，他就会根据之前提供的Qt6文件所在路径把Qt6一系列组件之类的文件路径自动填好了，大体看看，没事直接再点Configure就行</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323221817535.png" class="" title="image-20230323221817535"><p>这次Configure完之后所有的选项都是白色，代表没有新增选项需要确认了，也就是Configure部分结束了，现在可以点Generate了</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323222011218.png" class="" title="image-20230323222011218"><p>Generate完之后直接点旁边的Open Project打开VS编译器</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323222231142.png" class="" title="image-20230323222231142"><p>在VS编译器解决方案处，找到ALL_BUILD，右键生成。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323222409125.png" class="" title="image-20230323222409125"><p>等ALL_BUILD都生成完之后，往下找到INSTALL，右键生成。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323223957500.png" class="" title="image-20230323223957500"><p>生成完之后，就能在install文件夹找到我们需要的编译后的文件</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323224152087.png" class="" title="image-20230323224152087"><h2 id="PCL源码编译"><a href="#PCL源码编译" class="headerlink" title="PCL源码编译"></a>PCL源码编译</h2><p>VTK编译好后就可以开始PCL源码的编译，我们用上面编译好的VTK文件替换掉PCL自带的VTK文件</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323224418402.png" class="" title="image-20230323224418402"><p>至于其他的第三方库文件，我们就用它自带的就行</p><p>PCL原来自带的编译后的文件可以直接删掉就行</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323224542344.png" class="" title="image-20230323224542344"><p>然后就在这新建source、build、install三个文件夹，开始CMake。当然这只是我个人的喜好，完全可以在别的地方编译生成PCL源码，到时候把前面配的环境变量根据自己编译生成的代码的位置改好对应起来就行。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323225046947.png" class="" title="image-20230323225046947"><p>跟之前一样，先去下载PCL源码解压到source中</p><p>找到之前PCL官方的GitHub <a href="https://github.com/PointCloudLibrary/pcl">https://github.com/PointCloudLibrary/pcl</a> ，找到master-&gt;Tags-&gt;pcl1.12.1，这里的pcl版本对应你要编译的pcl版本。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323225220256.png" class="" title="image-20230323225220256"><p>选择之后界面提供的就是对应版本的pcl源码，点击下载即可。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323225449413.png" class="" title="image-20230323225449413"><p>源码解压好之后先别急，先在解压后的文件的cmake目录里找到“pcl_find_boost.cmake”这个文件。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323230410939.png" class="" title="image-20230323230410939"><p>编辑该文件，给出Boost的lib和include文件夹所在位置</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323230729136.png" class="" title="image-20230323230729136"><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#增加下面两行代码</span><br><span class="hljs-keyword">set</span>(Boost_LIBRARY_DIR E:/PCL_1.<span class="hljs-number">12.1</span>/<span class="hljs-number">3</span>rdParty/Boost/lib)<br><span class="hljs-keyword">set</span>(Boost_INCLUDE_DIR E:/PCL_1.<span class="hljs-number">12.1</span>/<span class="hljs-number">3</span>rdParty/Boost/<span class="hljs-keyword">include</span>/boost-<span class="hljs-number">1</span>_78)<br></code></pre></td></tr></table></figure><p>之后就跟之前VTK的编译过程一样了，打开CMake的GUI界面，配置好source和build位置，然后Configure</p><p>第一次编译还是先改install的位置，然后发现说EIGEN的路径没找到，所以我们也给它配置一下，再点Configure</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323230021064.png" class="" title="image-20230323230021064"><p>配置FLANN文件位置</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323231710412.png" class="" title="image-20230323231710412"><p>OPENNI2的路径他自己找到了给我省事了，Qt6文件夹路径还是没找到，我就自己给他配一下</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323231941937.png" class="" title="image-20230323231941937"><p>再确认一下VTK的路径，WITH_QT的版本</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323232050888.png" class="" title="image-20230323232050888"><p>然后选择PCL要生成的模块，这个新电脑没有GPU我就先没选GPU模块，选择all_in_one_installer就会生成一个官方那种的安装包，会根据我们的配置进行打包，之后还要在其他地方用这套配置直接用我们自己生成的all_in_one_installer安装即可。有些模块没选，到时候有需要的话可以再CMake，然后把需要的模块选上，然后在VS生成就行，不需要再配之前的路径了，因为上面那些选择已经记录在build文件中的cmake文件里了。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323232350022.png" class="" title="image-20230323232350022"><p>之后就是一路Configure，直到所有选项全白了，之后再Generate，然后Open Project打开VS，找到解决方案中的CMakePredefinedTargets，右键ALL_BUILD生成。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323233021933.png" class="" title="image-20230323233021933"><p>生成完再右键INSTALL生成。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323234044007.png" class="" title="image-20230323234044007"><p>搞定后就可以看到install中已经得到我们所需的编译好的文件。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323234510267.png" class="" title="image-20230323234510267"><p>这里要反思一下，之前CMake编译的时候，之所以找不到Eigen、FLANN，需要我手动添加，原因在于我在新电脑上配置的时候没有把这两个的路径加到环境变量里，你像OPENNI2因为它安装的时候自动配好了环境变量，所以CMake能直接找到，Qt6也是因为没有在环境变量里配置所以总是找不到，需要我手动配置。</p><p>然后因为我编译好的PCL源码路径发生了改变，所以环境变量的路径，在VS中配置的路径，也要稍微改一下。当然，你可以直接把这些新编译好的文件就放在之前VS配置的那个路径里，这样就不用变了。不过还有VTK的路径，之前自带的VTK文件夹名字里是9.1，现在变成9.2了也要改一下。</p><p>环境变量</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323235614665.png" class="" title="image-20230323235614665"><p>头文件位置</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323234635047.png" class="" title="image-20230323234635047"><p>lib库位置</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323234842387.png" class="" title="image-20230323234842387"><p>还有新编译生成的lib文件名也都是从之前的9.1变成9.2了，也要重新导入一下，把vtk9.1的lib都换成vtk9.2的lib。</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230323235037235.png" class="" title="image-20230323235037235"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><code class="hljs plain">pcl_commond.lib<br>pcl_featuresd.lib<br>pcl_filtersd.lib<br>pcl_iod.lib<br>pcl_io_plyd.lib<br>pcl_kdtreed.lib<br>pcl_keypointsd.lib<br>pcl_mld.lib<br>pcl_octreed.lib<br>pcl_outofcored.lib<br>pcl_peopled.lib<br>pcl_recognitiond.lib<br>pcl_registrationd.lib<br>pcl_sample_consensusd.lib<br>pcl_searchd.lib<br>pcl_segmentationd.lib<br>pcl_stereod.lib<br>pcl_surfaced.lib<br>pcl_trackingd.lib<br>pcl_visualizationd.lib<br>libboost_atomic-vc142-mt-gd-x64-1_78.lib<br>libboost_bzip2-vc142-mt-gd-x64-1_78.lib<br>libboost_chrono-vc142-mt-gd-x64-1_78.lib<br>libboost_container-vc142-mt-gd-x64-1_78.lib<br>libboost_context-vc142-mt-gd-x64-1_78.lib<br>libboost_contract-vc142-mt-gd-x64-1_78.lib<br>libboost_coroutine-vc142-mt-gd-x64-1_78.lib<br>libboost_date_time-vc142-mt-gd-x64-1_78.lib<br>libboost_exception-vc142-mt-gd-x64-1_78.lib<br>libboost_filesystem-vc142-mt-gd-x64-1_78.lib<br>libboost_graph-vc142-mt-gd-x64-1_78.lib<br>libboost_graph_parallel-vc142-mt-gd-x64-1_78.lib<br>libboost_iostreams-vc142-mt-gd-x64-1_78.lib<br>libboost_json-vc142-mt-gd-x64-1_78.lib<br>libboost_locale-vc142-mt-gd-x64-1_78.lib<br>libboost_log-vc142-mt-gd-x64-1_78.lib<br>libboost_log_setup-vc142-mt-gd-x64-1_78.lib<br>libboost_math_c99-vc142-mt-gd-x64-1_78.lib<br>libboost_math_c99f-vc142-mt-gd-x64-1_78.lib<br>libboost_math_c99l-vc142-mt-gd-x64-1_78.lib<br>libboost_math_tr1-vc142-mt-gd-x64-1_78.lib<br>libboost_math_tr1f-vc142-mt-gd-x64-1_78.lib<br>libboost_math_tr1l-vc142-mt-gd-x64-1_78.lib<br>libboost_mpi-vc142-mt-gd-x64-1_78.lib<br>libboost_nowide-vc142-mt-gd-x64-1_78.lib<br>libboost_numpy38-vc142-mt-gd-x64-1_78.lib<br>libboost_prg_exec_monitor-vc142-mt-gd-x64-1_78.lib<br>libboost_program_options-vc142-mt-gd-x64-1_78.lib<br>libboost_python38-vc142-mt-gd-x64-1_78.lib<br>libboost_random-vc142-mt-gd-x64-1_78.lib<br>libboost_regex-vc142-mt-gd-x64-1_78.lib<br>libboost_serialization-vc142-mt-gd-x64-1_78.lib<br>libboost_system-vc142-mt-gd-x64-1_78.lib<br>libboost_test_exec_monitor-vc142-mt-gd-x64-1_78.lib<br>libboost_thread-vc142-mt-gd-x64-1_78.lib<br>libboost_timer-vc142-mt-gd-x64-1_78.lib<br>libboost_type_erasure-vc142-mt-gd-x64-1_78.lib<br>libboost_unit_test_framework-vc142-mt-gd-x64-1_78.lib<br>libboost_wave-vc142-mt-gd-x64-1_78.lib<br>libboost_wserialization-vc142-mt-gd-x64-1_78.lib<br>libboost_zlib-vc142-mt-gd-x64-1_78.lib<br>flann-gd.lib<br>flann_cpp-gd.lib<br>flann_cpp_s-gd.lib<br>flann_s-gd.lib<br>OpenNI2.lib<br>qhullcpp_d.lib<br>qhullstatic_d.lib<br>qhullstatic_rd.lib<br>qhull_rd.lib<br>vtkcgns-9.2d.lib<br>vtkChartsCore-9.2d.lib<br>vtkCommonColor-9.2d.lib<br>vtkCommonComputationalGeometry-9.2d.lib<br>vtkCommonCore-9.2d.lib<br>vtkCommonDataModel-9.2d.lib<br>vtkCommonExecutionModel-9.2d.lib<br>vtkCommonMath-9.2d.lib<br>vtkCommonMisc-9.2d.lib<br>vtkCommonSystem-9.2d.lib<br>vtkCommonTransforms-9.2d.lib<br>vtkDICOMParser-9.2d.lib<br>vtkDomainsChemistry-9.2d.lib<br>vtkDomainsChemistryOpenGL2-9.2d.lib<br>vtkdoubleconversion-9.2d.lib<br>vtkexodusII-9.2d.lib<br>vtkexpat-9.2d.lib<br>vtkFiltersAMR-9.2d.lib<br>vtkFiltersCore-9.2d.lib<br>vtkFiltersExtraction-9.2d.lib<br>vtkFiltersFlowPaths-9.2d.lib<br>vtkFiltersGeneral-9.2d.lib<br>vtkFiltersGeneric-9.2d.lib<br>vtkFiltersGeometry-9.2d.lib<br>vtkFiltersHybrid-9.2d.lib<br>vtkFiltersHyperTree-9.2d.lib<br>vtkFiltersImaging-9.2d.lib<br>vtkFiltersModeling-9.2d.lib<br>vtkFiltersParallel-9.2d.lib<br>vtkFiltersParallelImaging-9.2d.lib<br>vtkFiltersPoints-9.2d.lib<br>vtkFiltersProgrammable-9.2d.lib<br>vtkFiltersSelection-9.2d.lib<br>vtkFiltersSMP-9.2d.lib<br>vtkFiltersSources-9.2d.lib<br>vtkFiltersStatistics-9.2d.lib<br>vtkFiltersTexture-9.2d.lib<br>vtkFiltersTopology-9.2d.lib<br>vtkFiltersVerdict-9.2d.lib<br>vtkfmt-9.2d.lib<br>vtkfreetype-9.2d.lib<br>vtkGeovisCore-9.2d.lib<br>vtkgl2ps-9.2d.lib<br>vtkglew-9.2d.lib<br>vtkGUISupportQt-9.2d.lib<br>vtkGUISupportQtQuick-9.2d.lib<br>vtkGUISupportQtSQL-9.2d.lib<br>vtkhdf5-9.2d.lib<br>vtkhdf5_hl-9.2d.lib<br>vtkImagingColor-9.2d.lib<br>vtkImagingCore-9.2d.lib<br>vtkImagingFourier-9.2d.lib<br>vtkImagingGeneral-9.2d.lib<br>vtkImagingHybrid-9.2d.lib<br>vtkImagingMath-9.2d.lib<br>vtkImagingMorphological-9.2d.lib<br>vtkImagingSources-9.2d.lib<br>vtkImagingStatistics-9.2d.lib<br>vtkImagingStencil-9.2d.lib<br>vtkInfovisCore-9.2d.lib<br>vtkInfovisLayout-9.2d.lib<br>vtkInteractionImage-9.2d.lib<br>vtkInteractionStyle-9.2d.lib<br>vtkInteractionWidgets-9.2d.lib<br>vtkIOAMR-9.2d.lib<br>vtkIOAsynchronous-9.2d.lib<br>vtkIOCesium3DTiles-9.2d.lib<br>vtkIOCGNSReader-9.2d.lib<br>vtkIOChemistry-9.2d.lib<br>vtkIOCityGML-9.2d.lib<br>vtkIOCONVERGECFD-9.2d.lib<br>vtkIOCore-9.2d.lib<br>vtkIOEnSight-9.2d.lib<br>vtkIOExodus-9.2d.lib<br>vtkIOExport-9.2d.lib<br>vtkIOExportGL2PS-9.2d.lib<br>vtkIOExportPDF-9.2d.lib<br>vtkIOGeometry-9.2d.lib<br>vtkIOHDF-9.2d.lib<br>vtkIOImage-9.2d.lib<br>vtkIOImport-9.2d.lib<br>vtkIOInfovis-9.2d.lib<br>vtkIOIOSS-9.2d.lib<br>vtkIOLegacy-9.2d.lib<br>vtkIOLSDyna-9.2d.lib<br>vtkIOMINC-9.2d.lib<br>vtkIOMotionFX-9.2d.lib<br>vtkIOMovie-9.2d.lib<br>vtkIONetCDF-9.2d.lib<br>vtkIOOggTheora-9.2d.lib<br>vtkIOParallel-9.2d.lib<br>vtkIOParallelXML-9.2d.lib<br>vtkIOPLY-9.2d.lib<br>vtkIOSegY-9.2d.lib<br>vtkIOSQL-9.2d.lib<br>vtkioss-9.2d.lib<br>vtkIOTecplotTable-9.2d.lib<br>vtkIOVeraOut-9.2d.lib<br>vtkIOVideo-9.2d.lib<br>vtkIOXML-9.2d.lib<br>vtkIOXMLParser-9.2d.lib<br>vtkjpeg-9.2d.lib<br>vtkjsoncpp-9.2d.lib<br>vtkkissfft-9.2d.lib<br>vtklibharu-9.2d.lib<br>vtklibproj-9.2d.lib<br>vtklibxml2-9.2d.lib<br>vtkloguru-9.2d.lib<br>vtklz4-9.2d.lib<br>vtklzma-9.2d.lib<br>vtkmetaio-9.2d.lib<br>vtknetcdf-9.2d.lib<br>vtkogg-9.2d.lib<br>vtkParallelCore-9.2d.lib<br>vtkParallelDIY-9.2d.lib<br>vtkpng-9.2d.lib<br>vtkpugixml-9.2d.lib<br>vtkRenderingAnnotation-9.2d.lib<br>vtkRenderingContext2D-9.2d.lib<br>vtkRenderingContextOpenGL2-9.2d.lib<br>vtkRenderingCore-9.2d.lib<br>vtkRenderingFreeType-9.2d.lib<br>vtkRenderingGL2PSOpenGL2-9.2d.lib<br>vtkRenderingHyperTreeGrid-9.2d.lib<br>vtkRenderingImage-9.2d.lib<br>vtkRenderingLabel-9.2d.lib<br>vtkRenderingLICOpenGL2-9.2d.lib<br>vtkRenderingLOD-9.2d.lib<br>vtkRenderingOpenGL2-9.2d.lib<br>vtkRenderingQt-9.2d.lib<br>vtkRenderingSceneGraph-9.2d.lib<br>vtkRenderingUI-9.2d.lib<br>vtkRenderingVolume-9.2d.lib<br>vtkRenderingVolumeOpenGL2-9.2d.lib<br>vtkRenderingVtkJS-9.2d.lib<br>vtksqlite-9.2d.lib<br>vtksys-9.2d.lib<br>vtkTestingRendering-9.2d.lib<br>vtktheora-9.2d.lib<br>vtktiff-9.2d.lib<br>vtkverdict-9.2d.lib<br>vtkViewsContext2D-9.2d.lib<br>vtkViewsCore-9.2d.lib<br>vtkViewsInfovis-9.2d.lib<br>vtkViewsQt-9.2d.lib<br>vtkWrappingTools-9.2d.lib<br>vtkzlib-9.2d.lib<br></code></pre></td></tr></table></figure><p>至此，PCL+VS+QT的配置告一段落，可以通过VTK在QT的ui界面显示PCL点云数据了</p><p>多提一嘴，QVTKOpenGLNativeWidget继承自Qt的QOpenGLWidget，所以用的时候记得Qt组件里选上Qt OpenGLWidget</p><img src="/2023/03/13/PCL1.12.1-VS2022-Qt6.4-config/image-20230324103455398.png" class="" title="image-20230324103455398"><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这些编译好的文件可以直接拿去用，换电脑的时候也不用重新编译一遍，只需要从旧电脑把这些编译好的文件拷过去，配好路径就行了。这样搞害怕路径什么的有问题的话，最保险的办法就是之前说的，编译PCL的时候选上all_in_one_installer，然后用这个生成的安装器，去新电脑上安一下就行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本教程分为两部分，第一部分为PCL+VS的配置，第二部分为PCL+VS+QT的配置。&lt;/p&gt;
&lt;p&gt;如果只是要在VS用用PCL，学习一下PCL点云库，只看第一部分PCL+VS的配置即可。&lt;/p&gt;
&lt;p&gt;而如果还需要配合QT做界面，相关的配置会在第二部分PCL+VS+QT的配</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="PCL" scheme="http://example.com/tags/PCL/"/>
    
  </entry>
  
  <entry>
    <title>Qt6.4.2-PCL1.12.1-VTK9.2.6-error</title>
    <link href="http://example.com/2023/03/09/Qt6.4-PCL1.12.1-VTK9.2.6-error/"/>
    <id>http://example.com/2023/03/09/Qt6.4-PCL1.12.1-VTK9.2.6-error/</id>
    <published>2023-03-09T14:27:39.000Z</published>
    <updated>2023-03-20T12:51:19.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>一开始因为PCL自带一个VTK9.1环境，因为要VTK和Qt配合，去官网下了完整VTK9.2自己编译了一下，然后又在Qt项目里配了一下VTK的环境，估计是他先找到了PCL自带的VTK9.1环境，就没管我自己配的VTK9.2，导致报了个“未定义标识符VTK_UNICODE_STRING”的错</p><p>考虑到两个VTK环境冲突的问题，就把PCL自带的那个VTK9.2的环境配置都删了一遍，结果又出现了下面的问题</p><img src="/2023/03/09/Qt6.4-PCL1.12.1-VTK9.2.6-error/image-20230309223634357.png" class="" title="image-20230309223634357"><p>看到这个dll想到可能是因为环境变量里PCL自带的VTK9,1和自己编译的VTK9.2冲突了，忘记改了，因为程序寻找dll文件是从环境变量PATH中从头到尾在找，当找到一个对应的目录的时候它就认定在这个目录里寻找dll文件了，而不会再往下找了，应该就是因为我把PCL自带的VTK9.1的bin路径放在了自己编译的VTK9.2的bin路径之前导致的问题</p><p>结果一看不对啊，自己编译的VTK9.2的bin路径是在上面的呀，惊了。。。</p><p>然后我又试了试直接把PCL自带的VTK9.1的bin路径删掉，结果程序报错找不到vtk9.1d的dll了，说明程序哪里还用着pcl自带的vtk9.1 。。。</p><p>话说pcl自带的vtk9.1有QVTKOpenGLNativeWidget吗，有的话我直接用PCL自带vtk9.1算了。。。</p><p>去看了一下没有，然后想起来了，这个模块是要编译VTK的时候选一下配合Qt才会生成，乐，还是要用自己配的。。。</p><p>可能是PCL一些东西配合自带的VTK才能实现，明天试试把自己编译的VTK覆盖PCL自带的VTK试一下。。。记得做好备份</p><p>实在不行就得把PCL编译需要的东西都下一遍，然后用CMake从头编译一下来弄了。。。</p><p>第二天继续试，把VTK覆盖试了试好像不行</p><p>然后开始调试，看看是哪个语句的问题，发现是初始化语句的问题，因为初始化用的是qvtkwidget版本时的代码，所以可能有些问题，于是就去找了QVTKOpenGLNativeWidget版本显示点云数据的代码</p><p>结果照着别人的代码敲还是有问题</p><img src="/2023/03/09/Qt6.4-PCL1.12.1-VTK9.2.6-error/image-20230310104709194.png" class="" title="image-20230310104709194"><p>找了找资料发现出现这种问题一般是因为这个类没有定义，其实就是vtkGenericOpenGLRenderWindow这个类的头文件没有引入，这里不得不吐槽一下，既然头文件没引入，你上面的的没啥不报错啊。。。</p><p>引入头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vtkGenericOpenGLRenderWindow.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>之后该语句就不会报错了</p><img src="/2023/03/09/Qt6.4-PCL1.12.1-VTK9.2.6-error/image-20230310105029695.png" class="" title="image-20230310105029695"><p>以为终于没问题的时候，在执行到语句</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">viewer.reset(<span class="hljs-keyword">new</span> pcl::visualization::PCLVisualizer(renderer,renderWindow,<span class="hljs-string">&quot;viewer&quot;</span>, <span class="hljs-literal">false</span>));<br></code></pre></td></tr></table></figure><p>的时候还是报错了。</p><img src="/2023/03/09/Qt6.4-PCL1.12.1-VTK9.2.6-error/image-20230310104511765.png" class="" title="image-20230310104511765"><p>估计还是因为弄了两个vtk导致的，可能pcl1.12和自己配的这个vtk9.2不太搭，网上查了查资料，也都是自己下一个vtk9.1自己编译一下，然后覆盖原来的pcl自带的vtkk，然后再编译PCL。</p><p>这次就老实照这个来一遍<a href="https://blog.csdn.net/qq_40732350/article/details/125394920%EF%BC%8C%E4%BB%96%E8%B7%9F%E6%88%91%E6%83%B3%E7%9A%84%E4%B8%80%E6%A0%B7%EF%BC%8C%E9%99%A4%E4%BA%86vtk%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%EF%BC%8C%E5%85%B6%E4%BB%96%E7%9B%B4%E6%8E%A5%E7%94%A8pcl%E8%87%AA%E5%B8%A6%E7%9A%84%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E5%B0%B1%E8%A1%8C%EF%BC%8C%E7%9C%81%E4%BA%8B%E3%80%82">https://blog.csdn.net/qq_40732350/article/details/125394920，他跟我想的一样，除了vtk自己编译，其他直接用pcl自带的编译好的就行，省事。</a></p><p>等开完会试一下。。。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过一番尝试，我已经完全理解了。</p><p>正确的做法就是用自己编译的vtk替代pcl自带的vtk，然后从官网下载pcl源码，然后重新编译pcl，让它和自己编译的vtk配合起来。这样既有了自己编译的vtk的Qt相关插件，又可以让pcl跟自己配的vtk适配，正常用pcl库。</p><p>具体的步骤见“PCL编译（暂定）”</p><h2 id="分析复盘"><a href="#分析复盘" class="headerlink" title="分析复盘"></a>分析复盘</h2><p>要使用Qt+PCL显示点云，需要用到VTK来控制Qt窗口组件来显示。而PCL自带的vtk是不含与Qt配合相关的文件的。于是，我就想着去vtk官网下一个vtk自己用cmake编译一下，选上qt6组件。也成功编译了，问题就在，我以为就是用一下这个组件，就给项目既配了PCL（自带vtk9.1）环境，又配了自己编译的vtk9.2环境，而这两个都有的情况下，编译器编译的时候会有各种冲突，除非你能精准挑出来pcl用的vtk9.1的哪部分，Qt用的vtk9.2的哪部分，然后只把这些用到的引入，其他无关的全部不要引到环境里，其实就算这样pcl和qt用的vtk的部分也可能重合，比如pcl要用9.1的vtkcommon.dll而qt要用9.2的vtkcommon.dll，所以还是不行，这样肯定冲突。</p><p>然后你又不能直接把pcl中vtk9.1的部分直接删掉或者替换成vtk9.2的，因为这个pcl是官网提供的编译好的，它是按照vtk9.1来编译的，对这个vtk9.1肯定又依赖。</p><p>所以，只有按上面解决办法来才是正解。而且顺便还可以配一下GPU模块。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;一开始因为PCL自带一个VTK9.1环境，因为要VTK和Qt配合，去官网下了完整VTK9.2自己编译了一下，然后又在Qt项目</summary>
      
    
    
    
    <category term="问题记录" scheme="http://example.com/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="PCL" scheme="http://example.com/tags/PCL/"/>
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
    <category term="VTK" scheme="http://example.com/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>OCC7.6+VS2022配置</title>
    <link href="http://example.com/2023/03/08/OCC7.6-VS2022-config/"/>
    <id>http://example.com/2023/03/08/OCC7.6-VS2022-config/</id>
    <published>2023-03-08T02:29:37.000Z</published>
    <updated>2023-03-23T09:05:59.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OCC安装与编译"><a href="#OCC安装与编译" class="headerlink" title="OCC安装与编译"></a>OCC安装与编译</h2><h3 id="安装OCC"><a href="#安装OCC" class="headerlink" title="安装OCC"></a>安装OCC</h3><p>安装很简单，就是去官网<a href="https://dev.opencascade.org/">https://dev.opencascade.org/</a> 下载安装包安装即可。</p><p>这里用的是OCC7.6版本。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308110314910.png" class="" title="image-20230308110314910"><p>注意：安装的时候路径不要有空格和汉字。</p><h3 id="VS2022编译v142的OCC"><a href="#VS2022编译v142的OCC" class="headerlink" title="VS2022编译v142的OCC"></a>VS2022编译v142的OCC</h3><p>安装之后得到的是OCC的编译前的资源文件，而想要使用OCC提供的方法还需要将这些文件进行编译。即编译后得到的文件才是我们使用OCC所必须的。</p><p>这里我安装的VS版本为2022，其默认的生成工具是v143，而OCC7.6最新支持的生成工具是v142，所以需要稍微操作一下，使VS2022能编译OCC。</p><p>需要注意的是，因为要用到v142生成工具，肯定要保证VS安装了v142的生成工具，没安的话打开Visual Studio Installer安一下即可。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308180525147.png" class="" title="image-20230308180525147"><p>下面是OCC部分编译前的一些操作：<br>打开安装目录下 \opencascade-7.6.0 目录下的custom.bat，将其中要求的vcvarsall.bat文件所在路径填写完整，该路径跟VS安装的位置有关，下图我的路径配置。题外话，推荐安装一个”notepad++“，轻量级代码编辑器，很好用。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308193109354.png" class="" title="image-20230308193109354"><p>如果实在不知道在哪，可以安装一个软件”everything“，用它来查找vcvarsall.bat的位置即可</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308193610012.png" class="" title="image-20230308193610012"><p>之后，还是在 \opencascade-7.6.0 目录下，打开env.bat，在图示位置添加：<code>set “VCVER=vc143”</code></p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308195613333.png" class="" title="image-20230308195613333"><p>再打开 \opencascade-7.6.0\adm\msvc目录下，复制一份vc142并重命名为vc143，这就是前面提到的，OCC7.6还没有对应的2022版本（vc143）</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308200116215.png" class="" title="image-20230308200116215"><p>补充：最近在win11新电脑上配的时候发现只配上面几步，在执行后面双击目录 \opencascade-7.6.0下的msvc.bat文件时，没有打开对应的sln文件。所以在这里再加一步，在安装目录下的 \opencascade-7.6.0文件夹，找到msvc.bat，编辑该文件，将第5行的”%1”和”%2”两个参数分别改为”vc143”和”win64”，如下图。改完保存退出。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230323162150037.png" class="" title="image-20230323162150037"><p>至此准备工作结束，可以用VS2022编译OCC7.6了</p><p>双击刚才编辑完的msvc.bat，它会根据前面的配置打开对应版本的OCCT.sln，打开后会需要确认是否升级平台工具集，记得选择”无升级“。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308200951007.png" class="" title="image-20230308200951007"><p>之后找到“解决方案资源管理器”，右键“解决方案”，选择“生成解决方案”即可</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308201434134.png" class="" title="image-20230308201434134"><p>等待VS编译完成</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230323163915557.png" class="" title="image-20230323163915557"><p>编译完成后生成的文件在 \opencascade-7.6.0\win64\vc14 目录下</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308211826087.png" class="" title="image-20230308211826087"><p>其中的bind文件夹、libd文件夹中的文件是我们使用OCC所必需的的文件。一般是bin文件夹和lib文件夹，不过在OCC这里是bind和libd，应该是分别表示bin和lib的debug版本。因为我一直用的debug版本调试，找的教程也都是说配bind和libd的，不太清楚这个bin和lib是不是在release版本下用的，等之后如果用到release调试的时候试一下看看，等试过之后再来补充。</p><p>libd文件夹，存放程序运行时所需要的lib文件，lib文件是指程序库（library）文件，也称为静态链接库（static library），它包含了一组可在程序中共享的函数和资源的代码。</p><p>bind文件夹，存放运行lib时所必需的的dll文件，DLL（Dynamic Link Library）是一种可执行文件格式，它包含一组可在多个程序中共享的函数和资源。它通常被用于在 Windows 操作系统中实现共享库和插件的功能。一个 DLL 文件可以包含多个函数和资源，其他程序可以通过动态链接库（Dynamic Link Library）的方式调用 DLL 文件中的函数。</p><h2 id="VS中配置OCC环境"><a href="#VS中配置OCC环境" class="headerlink" title="VS中配置OCC环境"></a>VS中配置OCC环境</h2><p>前面也提到，我们所需的bind文件夹和libd文件夹生成好了之后，就可以配置在VS中使用OCC所需的一些属性，像OCC、PCL、VTK这种C++的库，其项目属性配置基本都是一致的，基本就是三步走。</p><p>第一步，将dll文件所在路径，在OCC这里即是上述提到的bind文件夹路径，添加到系统环境变量Path中</p><p>有时候更改完环境变量之后可能需要重启一下电脑才能生效。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308214135094.png" class="" title="image-20230308214135094"><p>再补充一点，上面加的这个环境变量只是最基本的，有时候程序调的OCC函数可能用到它自带的其他第三方库函数，这时可能会报缺少xxx.dll文件的错误，这时候就用”everything“查找该文件名，然后把该文件所在路径加到上面的环境变量里就行。比如这里程序运行时提示我缺少”tbb_debug.dll”，我就去搜这个文件，发现有很多该文件，选一个觉得最靠谱的文件路径添加到上面环境变量Path里就行。我这里看这个文件夹路径是vc14，感觉应该是适配vc14x版本的dll文件，我就选了这个。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230323170313666.png" class="" title="image-20230323170313666"><p>之后在我们所建的项目中，在解决方案栏中，右键点击项目，选择属性一栏</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308214410626.png" class="" title="image-20230308214410626"><p>在属性页找到 调试—&gt;环境，输入 <code>PATH=%PATH%</code> ，使调试时能找到环境变量中bind所在路径，进一步能找到dll文件</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308214657910.png" class="" title="image-20230308214657910"><p>第二步，在属性页中找到 链接器—&gt;常规—&gt;附加库目录，将libd所在路径添加进去，方便编译器编译时能找到lib文件</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308215305372.png" class="" title="image-20230308215305372"><p>再找到 链接器—&gt;输入—&gt;附加依赖项，将libd文件夹下所有的lib文件添加进去</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308215515181.png" class="" title="image-20230308215515181"><p>至于如何快速取得文件夹下所有lib文件列表，找到目标文件夹libd，在该文件夹下“shift+右键”，选择 Powershell打开</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308220253619.png" class="" title="image-20230308220253619"><p>在该命令窗口输入 <code>ls *.lib -n</code>，即可得到该文件夹下所有lib结尾的文件列表，其中<code>-n</code>是指定列出来的信息只包含文件名和后缀，可以自己试试不带<code>-n</code>的结果</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308220606901.png" class="" title="image-20230308220606901"><p>第三步，在属性页找到 C/C++—&gt;常规—&gt;附加库包含目录，将OCC的头文件路径添加进去，该路径为安装目录下 \opencascade-7.6.0\inc ，其中存放的是在使用OCC时所需的所有头文件</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230308220708196.png" class="" title="image-20230308220708196"><p>上面三步无关顺序，能配完就行。</p><p>至此，就可以在C++程序中使用OCC提供的各种功能啦，开始愉快编程啦~</p><h2 id="VS属性表的使用"><a href="#VS属性表的使用" class="headerlink" title="VS属性表的使用"></a>VS属性表的使用</h2><h3 id="新建属性表"><a href="#新建属性表" class="headerlink" title="新建属性表"></a>新建属性表</h3><p>上面配置的VS属性页只针对当前项目有效，如果要新建项目并使用OCC，需要将上面的三个步骤再配置一遍，很不方便。而使用VS属性表就可以实现只用配置一次，下次直接拿来用即可的效果</p><p>在VS窗口上边菜单栏找到 视图—&gt;其他窗口—&gt;属性管理器</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309092828035.png" class="" title="image-20230309092828035"><p>选择之后，属性管理器就会出现在解决方案管理器旁边的位置</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309102328776.png" class="" title="image-20230309102328776"><p>找到自己需要的版本，比如我一般使用Debug|x64版本，我就在对应项旁边右键，选择 添加新项目属性表</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309102607140.png" class="" title="image-20230309102607140"><p>因为是给OCC配置的属性表，就叫OCC.props吧，至于这个位置，它默认是建在当前项目所在的文件夹中，可以自定义一个文件夹位置，就光用来存这种属性表，当时候项目中需要哪个属性表，就直接去那个文件夹中好就行。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309093633371.png" class="" title="image-20230309093633371"><p>在建好的属性表里，把前面第二步、第三步里，关于“C/C++”和“链接器”选项中的部分复现一下即可，简单概括就是“C/C++”的附加包含目录里添加头文件目录，”链接器“的附加库目录里添加lib库路径、附加依赖项里把lib库中的所有lib添加进去。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309093948772.png" class="" title="image-20230309093948772"><p>可以看到这个属性表里没有第一步中“调试”选项，所以在 调试—&gt;环境，输入 <code>PATH=%PATH%</code> 这一步还是需要在具体的新建项目中配置一下，步骤参考前面第一步。</p><h3 id="使用已有属性表"><a href="#使用已有属性表" class="headerlink" title="使用已有属性表"></a>使用已有属性表</h3><p>上面属性表建好之后，下次新的项目要是用OCC的时候，直接把这个属性表引入即可</p><p>在属性管理器，要是用的对应版本处右键点击，选择 添加现有属性页</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309102725370.png" class="" title="image-20230309102725370"><p>找到之前建好的属性表，添加即可</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309102917214.png" class="" title="image-20230309102917214"><p>需要注意的是，通过这种添加现有项方式加入的属性表并不是把之前建的表复制了一个放在新项目里，新项目中是找不到这个属性表文件的，它实际还是之前建的那个属性表，只是编译器把它链接了过来，使我们可以使用该表的配置。这也意味着你如果在对这个属性表进行改动，会影响到所有使用该属性表的项目，一定要注意。</p><img src="/2023/03/08/OCC7.6-VS2022-config/image-20230309110423674.png" class="" title="image-20230309110423674"><p>当然，其实也可以将之前建的属性表复制一个到新建项目的文件夹里，然后在添加现有项时添加当前这一个，这样就可以随便改了，也不会对别的项目有什么影响。</p><p>以上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OCC安装与编译&quot;&gt;&lt;a href=&quot;#OCC安装与编译&quot; class=&quot;headerlink&quot; title=&quot;OCC安装与编译&quot;&gt;&lt;/a&gt;OCC安装与编译&lt;/h2&gt;&lt;h3 id=&quot;安装OCC&quot;&gt;&lt;a href=&quot;#安装OCC&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="OCC" scheme="http://example.com/tags/OCC/"/>
    
  </entry>
  
  <entry>
    <title>大家一起学英语</title>
    <link href="http://example.com/2023/03/07/English-Word/"/>
    <id>http://example.com/2023/03/07/English-Word/</id>
    <published>2023-03-07T07:34:56.000Z</published>
    <updated>2023-04-10T13:51:47.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在学习OCC、PCL等C++库，或是其他一些技术时，通常需要阅读官方提供的技术手册，而这些手册大多是英文编写，虽然可以直接使用翻译软件进行翻译，但毕竟翻译软件有时翻译的也是词不达意，加之它可能把人家定义的类名之类的东西也翻译成中文，还不如直接看英文。综上，长远来看，提升自己的英文水平总没错，本文用来收集阅读英文手册或教程时遇到的各种不认识的单词，也不指望能将这些单词全部融汇贯通，但希望下次见到时最起码能认得它是个什么意思。</p><h3 id="OCC"><a href="#OCC" class="headerlink" title="OCC"></a>OCC</h3><ul><li>geometry：几何学</li><li>parametric：参数</li><li>dimension：纬度</li><li>infinity：无限大</li><li>second order：二阶</li><li>criteria：标准</li><li>scaled ellipse：缩放的椭圆</li><li>cylinder：圆筒</li><li>conjugate：共轭的</li><li>projection：投影</li><li>intersection：交叉点</li><li>topology：拓扑学</li></ul><h3 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h3><ul><li>complicate：复杂化</li><li>trim：修剪</li><li>outliers：离群值、异常值</li><li>deviation：偏差</li></ul><h3 id="CloudCompare-Wiki"><a href="#CloudCompare-Wiki" class="headerlink" title="CloudCompare Wiki"></a>CloudCompare Wiki</h3><ul><li>mesh：网格</li><li>portable：便携式（可移植）</li><li>trade-off：权衡利弊</li><li>entity：实体</li><li>property：属性（财产）</li><li>scalar：标量</li><li>scale：规模、刻度</li><li>align：对齐</li><li>alignment：对齐</li><li>registration：配准（注册）</li><li>fine registration：精确配准</li><li>primitive：原始的、基础的</li><li>primitive factory：基体工厂（创建基础模型）</li><li>cloud/primitive Dist：点云/基体距离</li><li>merge：合并</li><li>subsample：子样本</li><li>Octree：八叉树</li><li>histogram：直方图</li><li>projection：预测</li><li>SF（scalar field）：标量字段</li><li>rasterize：栅格化</li><li>volume：体积</li><li>statistic：统计数据</li><li>ALS：机载激光雷达扫描</li><li>TLS：地面激光雷达扫描</li></ul><h3 id="Octree-Wikipedia"><a href="#Octree-Wikipedia" class="headerlink" title="Octree Wikipedia"></a>Octree Wikipedia</h3><p><a href="https://en.wikipedia.org/wiki/Octree">https://en.wikipedia.org/wiki/Octree</a></p><ul><li>Octree：八叉树，用来将3维空间递归地细分为8个卦限，它相当于三维空间的四叉树</li><li>Quadtree：四叉树，用来将2维空间递归的分为4个象限。</li><li>octant：卦限，类似于于二维空间的象限，一维空间的ray</li><li>quadrant：象限</li><li>ray：射线（？）</li><li>recursively：递归的</li><li>subdivide：细分</li><li>analog：模拟、类似</li><li>dimension：纬度</li></ul><h4 id="Implementation-for-point-decomposition"><a href="#Implementation-for-point-decomposition" class="headerlink" title="Implementation for point decomposition"></a>Implementation for point decomposition</h4><p>The example recursive algorithm outline below (<a href="https://en.wikipedia.org/wiki/MATLAB">MATLAB</a> syntax) decomposes an array of 3-dimensional points into octree style  bins. The implementation begins with a single bin surrounding all given  points, which then recursively subdivides into its 8 octree regions.  Recursion is stopped when a given exit condition is met. Examples of  such exit conditions (shown in code below) are:</p><ul><li>When a bin contains fewer than a given number of points</li><li>When a bin reaches a minimum size or volume based on the length of its edges</li><li>When recursion has reached a maximum number of subdivisions</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[binDepths, binParents ,binCorners, pointBins]</span> = <span class="hljs-title">OcTree</span><span class="hljs-params">(points)</span></span><br><br>binDepths = [<span class="hljs-number">0</span>]     <span class="hljs-comment">% Initialize an array of bin depths with this single base-level bin</span><br>binParents = [<span class="hljs-number">0</span>]    <span class="hljs-comment">% This base level bin is not a child of other bins</span><br>binCorners = [<span class="hljs-built_in">min</span>(points) <span class="hljs-built_in">max</span>(points)] <span class="hljs-comment">% It surrounds all points in XYZ space</span><br>pointBins(:) = <span class="hljs-number">1</span>    <span class="hljs-comment">% Initially, all points are assigned to this first bin</span><br>divide(<span class="hljs-number">1</span>)           <span class="hljs-comment">% Begin dividing this first bin</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">divide</span><span class="hljs-params">(binNo)</span></span><br><br><span class="hljs-comment">% If this bin meets any exit conditions, do not divide it any further.</span><br>binPointCount = nnz(pointBins == binNo)<br>binEdgeLengths = binCorners(binNo, <span class="hljs-number">1</span>:<span class="hljs-number">3</span>) - binCorners(binNo, <span class="hljs-number">4</span>:<span class="hljs-number">6</span>)<br>binDepth = binDepths(binNo)<br>exitConditionsMet = binPointCount&lt;value || <span class="hljs-built_in">min</span>(binEdgeLengths) &lt; value || binDepth &gt; value<br><span class="hljs-keyword">if</span> exitConditionsMet<br>    <span class="hljs-keyword">return</span>; <span class="hljs-comment">% Exit recursive function</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% Otherwise, split this bin into 8 new sub-bins with a new division point</span><br>newDiv = (binCorners(binNo, <span class="hljs-number">1</span>:<span class="hljs-number">3</span>) + binCorners(binNo, <span class="hljs-number">4</span>:<span class="hljs-number">6</span>)) / <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">8</span><br>    newBinNo = <span class="hljs-built_in">length</span>(binDepths) + <span class="hljs-number">1</span><br>    binDepths(newBinNo) = binDepths(binNo) + <span class="hljs-number">1</span><br>    binParents(newBinNo) = binNo<br>    binCorners(newBinNo) = [one of the <span class="hljs-number">8</span> pairs of the newDiv with minCorner or maxCorner]<br>    oldBinMask = pointBins == binNo<br>    <span class="hljs-comment">% Calculate which points in pointBins == binNo now belong in newBinNo</span><br>    pointBins(newBinMask) = newBinNo<br>    <span class="hljs-comment">% Recursively divide this newly created bin</span><br>    divide(newBinNo)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>不定期更新中。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;在学习OCC、PCL等C++库，或是其他一些技术时，通常需要阅读官方提供的技术手册，而这些手册大多是英文编写，虽然可以直接使用翻译软件进行翻</summary>
      
    
    
    
    <category term="英文学习" scheme="http://example.com/categories/%E8%8B%B1%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="English Word" scheme="http://example.com/tags/English-Word/"/>
    
  </entry>
  
  <entry>
    <title>C/C++笔记</title>
    <link href="http://example.com/2022/11/01/C-Note/"/>
    <id>http://example.com/2022/11/01/C-Note/</id>
    <published>2022-11-01T13:54:17.000Z</published>
    <updated>2023-04-18T07:23:39.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-C-相关"><a href="#C-C-相关" class="headerlink" title="C/C++相关"></a>C/C++相关</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>如果变量声明在主函数外部，即作为全局变量的时候，其默认是为0；而如果变量声明在函数内部，变量的值是随机的，而不是默认为零，需要进行初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> b[N];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;++i)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;a[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;]:&quot;</span>&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;b[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;]:&quot;</span>&lt;&lt;b[i]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一次运行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">a[0]:0 b[0]:8<br>a[1]:0 b[1]:0<br>a[2]:0 b[2]:4199705<br>a[3]:0 b[3]:0<br>a[4]:0 b[4]:8<br>a[5]:0 b[5]:0<br>a[6]:0 b[6]:48<br>a[7]:0 b[7]:0<br>a[8]:0 b[8]:15603440<br>a[9]:0 b[9]:0<br></code></pre></td></tr></table></figure><p>可以看到作全局变量的a[]，其中所有值都默认为0；而作局部变量的b[]，其中的值是随机赋予的，下一次运行时，其中的值又不一定是什么了，所以对于声明在函数内部的局部变量一定要注意初始化问题，防止由此引发的错误。</p><p><strong>注意：</strong>不是只有数组是这样，只要是变量，都符合上述性质，局部变量的默认值是随机的，全局变量的默认值才是0。</p><h2 id="关于输入、输出"><a href="#关于输入、输出" class="headerlink" title="关于输入、输出"></a>关于输入、输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<span class="hljs-comment">//输入整数</span><br><span class="hljs-comment">//&quot;%d&quot;表示整数int</span><br><span class="hljs-comment">//&quot;%lf&quot;表示长浮点数double</span><br><span class="hljs-comment">//&quot;%f&quot;表示浮点数float</span><br><span class="hljs-comment">//&quot;%s&quot;表示字符串string</span><br><span class="hljs-comment">//&quot;%c&quot;表示字符char</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>scanf ( )是有返回值的，返回值表示成功匹配和赋值的个数（int）</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<span class="hljs-comment">//输出整数,\n表示输出a之后回车</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,a,b);<span class="hljs-comment">//输出的两个数之间也会空一格空格，跟&quot;%d %d&quot;保持一致</span><br></code></pre></td></tr></table></figure><p>若要使输出保留固定几位小数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>,a);<span class="hljs-comment">//&quot;.2lf&quot;表示保留两位小数输出double类型的a</span><br></code></pre></td></tr></table></figure><p>若想输出固定位数长度的整数，且不够的位补0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%03d&quot;</span>,a);<span class="hljs-comment">//&quot;%03d&quot;表示输出3位整数，不够的位补0，如25如果按&quot;%03d%输出，结果为025</span><br></code></pre></td></tr></table></figure><p>如果不加0，只规定位数，则不够的位会用空格补齐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d&quot;</span>,a);<span class="hljs-comment">//如25按&quot;%3d&quot;输出，结果为·25(前面的‘·’表示空格，方便看)</span><br></code></pre></td></tr></table></figure><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><p><strong>数组初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(a));<span class="hljs-comment">//把数组a清零</span><br></code></pre></td></tr></table></figure><p><strong>数组间复制</strong></p><p>将数组a复制k个元素到数组b中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-built_in">memcpy</span>(b,a,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*k);<span class="hljs-comment">//这里就当a和b都是int数组</span><br></code></pre></td></tr></table></figure><p>同理可知若两个都是double数组，则</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memcpy</span>(b,a,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">double</span>)*k);<br></code></pre></td></tr></table></figure><p>把数组a全部复制到数组b中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">memcpy(b,a,sizeof(a));<br></code></pre></td></tr></table></figure><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><p><strong>输入字符数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> s[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<span class="hljs-comment">//注意这里的s前面没有“&amp;”</span><br></code></pre></td></tr></table></figure><p>上述语句会将读入的字符串存到字符数组s中，遇到空格、TAB和回车会终止读入</p><p><strong>输入字符</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s[i]);<span class="hljs-comment">//这时候前面要加“&amp;”</span><br></code></pre></td></tr></table></figure><p><strong>字符数组的复制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>],b[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strcpy</span>(a,b);<span class="hljs-comment">//将b字符串复制到a</span><br></code></pre></td></tr></table></figure><p><strong>字符串的比较</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">strcmp(s1,s2);<br></code></pre></td></tr></table></figure><p>字符串大小的比较是以ASCII 码表上的顺序来决定，此顺序亦为字符的值。strcmp()首先将s1 第一个字符值减去s2 第一个字符值，若差值为0 则再继续比较下个字符，若差值不为0 则将差值返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br>main()&#123;<br>    <span class="hljs-keyword">char</span> *a = <span class="hljs-string">&quot;aBcDeF&quot;</span>;<br>    <span class="hljs-keyword">char</span> *b = <span class="hljs-string">&quot;AbCdEf&quot;</span>;<br>    <span class="hljs-keyword">char</span> *c = <span class="hljs-string">&quot;aacdef&quot;</span>;<br>    <span class="hljs-keyword">char</span> *d = <span class="hljs-string">&quot;aBcDeF&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strcmp(a, b) : %d\n&quot;</span>, <span class="hljs-built_in">strcmp</span>(a, b));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strcmp(a, c) : %d\n&quot;</span>, <span class="hljs-built_in">strcmp</span>(a, c));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strcmp(a, d) : %d\n&quot;</span>, <span class="hljs-built_in">strcmp</span>(a, d)); <br>    &#125;<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">strcmp(a, b) : 32<br>strcmp(a, c) :-31<br>strcmp(a, d) : 0<br></code></pre></td></tr></table></figure><p><strong>字符串的连接</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>],b[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">strcat</span>(a,b);<span class="hljs-comment">//将字符串a的内容接到b字符串之后</span><br></code></pre></td></tr></table></figure><p>注意b字符串大小为10，这个大小需要能够容纳连接后的总字符串长度</p><p>连接的过程相当于将a中的字符串顺序填到b字符串后的空余位置</p><p>如a[10]=”aaa”; b[10]=”bbb”， 连接后的结果为b[10]=”bbbaaa”</p><p><strong>把信息输出到字符串</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a=<span class="hljs-number">65</span>,b=<span class="hljs-number">97</span>;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%d%d&quot;</span>,a,b);<span class="hljs-comment">//把a、b两个数格式化输出到字符数组buf中</span><br></code></pre></td></tr></table></figure><p>“%d”部分根据要输出到buf中的内容来定，输字符char就是“%c”，字符串string就是“%s”，都一样的。</p><p>最重要的这是格式化输出到buf中，buf中存的信息为“6597”，即buf[0]=’6’; buf[1]=’5’; buf[2]=’9’; buf[3]=’7’ 。</p><p>而不会发生强制类型转换，将a和b所对应ASCII码的字符存入，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> a=<span class="hljs-number">65</span>;<br><span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>];<br>*c=a;<br></code></pre></td></tr></table></figure><p>这种的就会出现强制类型转换，可能是想把65存到c数组中，但实际会发生强制类型转换，将65对应的ASCII码“A”，存到c数组的第一个位置，即c[0]=’A’</p><p><strong>求数组实际长度</strong></p><p>像上面那样实际buf声明了20个字节大小，实际并没有全部用完，如果直接要求输出buf中20个字节的内容会出现错误，这时就需要判断buf的实际使用大小</p><p>需要用到的函数为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">strlen</span>(buf);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(buf);++i)<br>&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;buf[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样buf中没有用到的部分不会被要去输出，避免出错</p><p><strong>输入字符串</strong></p><p>使用getchar()函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> c;<br><span class="hljs-keyword">while</span>((c=getchar())!=EOF)<span class="hljs-comment">//EOF是一个特殊的结束标志</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,c);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符重载（详见《C-Primer》P490）"><a href="#运算符重载（详见《C-Primer》P490）" class="headerlink" title="运算符重载（详见《C++ Primer》P490）"></a>运算符重载（详见《C++ Primer》P490）</h2><p>重载运算符一般是为了方便直接操作自定义的结构体、类，所以现在这里定义一个结构体，方便下面举例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x,y;<br>    Point(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>):x(x),y(y)&#123;&#125;<span class="hljs-comment">//构造函数，默认值0</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>算术操作符重载</strong></p><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">Point <span class="hljs-keyword">operator</span> + (<span class="hljs-keyword">const</span> Point &amp;A,<span class="hljs-keyword">const</span> Point &amp;B)&#123;<br>    <span class="hljs-keyword">return</span> Point(A.x+B.x,A.y+B.y);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在可以直接操作两个Point类型的变量进行加法运算，运算的规则即上面加法所定义的规则</p><p><strong>输出运算符重载</strong></p><p>输出运算符的第一个形参是一个非常量ostream对象的引用；第二个形参是一个常量的引用，该常量是我们想要打印的类类型。</p><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;out, <span class="hljs-keyword">const</span> Point &amp;p)&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;p.x&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;p.y&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;<span class="hljs-comment">//用out装相应打印的内容，再将out返回</span><br>    <span class="hljs-keyword">return</span> out;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是我们便可以直接输出结构的内容，输出的形式就是我们上述定义的形式</p><p><strong>上述重载的使用举例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Point a,b(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    a.x=<span class="hljs-number">3</span>;<span class="hljs-comment">//a.y没有定义,默认为0</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-comment">//先使用了重载的Point加法运算，再用了重载的Point输出运算</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">(4,2)<br></code></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><strong>函数模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">sum</span><span class="hljs-params">(T *begin , T *end)</span></span>&#123;<br>    T *p=begin;<br>    T ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(T *p= begin ; p != end; p++)&#123;<br>        ans = ans + *p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数模板的作用是求数组的和，使用时直接传参数使用即可，会根据所传参数的类型自动将上述的“T”代换成对应的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> main&#123;<br><span class="hljs-keyword">double</span> a[] = &#123;<span class="hljs-number">1.1</span> , <span class="hljs-number">2.2</span> , <span class="hljs-number">3.3</span> , <span class="hljs-number">4.4</span>&#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum(a,a+<span class="hljs-number">4</span>)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    Point b[] = &#123;Point(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) , Point(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) , Point(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>) , Point(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>)&#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum(b,b+<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结构体模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    T x,y;<br>    Point(T x=<span class="hljs-number">0</span>,T y=<span class="hljs-number">0</span>):x(x),y(y)&#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这时在使用Point模板的时候需要主动声明模板中的“T”具体的类型，具体的用法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> main&#123;<br>Point&lt;int&gt; a(1,2),b(3,4);<br>    Point&lt;double&gt; c(1.1,2.2),d(3.3,4.4);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul><li><code>private</code>：私有</li><li><code>public</code>：公有</li><li><code>protected</code>：保护</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> b=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">int</span> c=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Test t;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;t.a&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//ok!public,对象可以访问</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;t.b&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//no!private,对象不可访问</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;t.c&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//no!protected,对象不可访问</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p><code>public</code>：公有继承，父类中<strong>公有成员</strong>和<strong>保护成员</strong>在子类中访问属性不变，<strong>私有成员</strong>在子类中不可直接访问</p></li><li><p><code>private</code>：私有继承，父类中<strong>公有成员</strong>和<strong>保护成员</strong>在子类中以私有成员身份出现，<strong>私有成员</strong>在子类中不可直接访问；私有继承使得子类进一步继续派生的情况下，原本父类的成员无法再直接发挥作用，因为它们对进一步派生出的子类而言已经是不可直接访问的私有成员</p></li><li><p><code>protected</code>：保护继承，父类中<strong>公有成员</strong>和<strong>保护成员</strong>在子类中以保护成员身份出现，<strong>私有成员</strong>在子类中不可直接访问</p></li></ul><h3 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base1</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base1(<span class="hljs-keyword">int</span> i)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Base1 &quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        a=i;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getnum1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> a;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base2</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base2(<span class="hljs-keyword">int</span> i)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Base2 &quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        b=i;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getnum2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> b;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base3</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    Base3()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Base3 *&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-comment">//Base3构造函数无参数，无须赋值，初始化时会自动调用该构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getnum3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> c=<span class="hljs-number">99</span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span>:</span><span class="hljs-keyword">public</span> Base2,<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base3&#123;<span class="hljs-comment">//赋值时按继承顺序赋值，先Base2，后Base1，最后Base3</span><br><span class="hljs-keyword">public</span>:<br>    Derived(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c ,<span class="hljs-keyword">int</span> d):Base1(a),member2(d),member1(c),Base2(b)&#123;&#125;<span class="hljs-comment">//赋值顺序见上下两行注释(注意b和d别看岔了)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getnumD1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> member1.getnum1();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getnumD2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> member2.getnum2();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getnumD3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> member3.getnum3();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Base1 member1;<span class="hljs-comment">//赋值时按照声明顺序赋值，先member1，后member2，最后member3</span><br>    Base2 member2;<br>    Base3 member3;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">Derived <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span></span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;obj.getnumD1()&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//子类使用父类做成员时，能够理所当然使用父类的访问函数，访问父类类型的私有成员</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;obj.getnumD2()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;obj.getnumD3()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;obj.getnum1()&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//子类可以直接通过父类的访问函数，访问初始化之后的父类私有成员</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;obj.getnum2()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;obj.getnum3()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C">Base2 <span class="hljs-number">2</span><br>Base1 <span class="hljs-number">1</span><br>Base3 *<br>Base1 <span class="hljs-number">3</span><br>Base2 <span class="hljs-number">4</span><br>Base3 *<br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">99</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>关于继承，不要忘了<strong>父类的私有成员也会被继承过来</strong>，只是子类不能直接调用，需要通过父类的方法来调用。</p><p>C++11标准中，子类能够从直接父类中继承构造函数并使用（注意只有直接父类才行）。所以，在子类的构造过程中：</p><p><code>Base1(a)</code>和<code>Base2(b)</code>实际是在子类<code>Derived</code>中调用父类<code>Base1</code>和<code>Base2</code>的构造函数，来对父类继承过来的私有成员<code>a</code>、<code>b</code>进行初始化。要想访问它们，也要使用父类继承过来的方法才行，即<code>obj.getnum1()</code>、<code>obj.getnum2()</code></p><p>至于<code>number1(c)</code>、<code>nmuber2(d)</code>的初始化，它们是<code>Base1</code>和<code>Base2</code>类型的实例化对象，所以它们的相关操作就是按类<code>Base1</code>和类<code>Base2</code>中的定义来执行的(按Base类中的构造函数初始化、调用方法之类的)。</p><p>关于<code>Base3()</code>和<code>number3()</code>的初始化，因为它们都有无参构造函数，所以在不传参的时候会默认调用它们的无参构造函数进行舒适化。</p><p>最后是关于初始化的顺序，或者说调用构造函数构造的顺序，实现构造基类<code>Base1-3</code>，再构造子类的对象<code>numbe1-3</code>。</p><p>其中基类的构造顺序按照继承时顺序来构造，继承顺序为：<code>class Derived:public Base2,public Base1,public Base3</code>，所以基类构造时的顺序为：<code>Base2()</code>、<code>Base1()</code>、<code>Base3()</code>。</p><p>子类的对象的构造顺序就按照对象声明时的顺序来，声明顺序为<code>Base1 number1;Base2 number2;Base3 number3;</code>所以子类的对象构造顺序为<code>number1()</code>、<code>number2()</code>、<code>number3()</code>。</p><p>另外补充一点：<strong>如果有虚基类，虚基类的构造还要排在基类的构造之前</strong>。如下例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;iostream.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OBJ1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    OBJ1()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;OBJ&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OBJ2</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    OBJ2()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;OBJ2&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BASE1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    BASE1()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;BASE1&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BASE2</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    BASE2()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;BASE2&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BASE3</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    BASE3()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;BASE3&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BASE4</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    BASE4()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;BASE4&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DERIVER</span> :</span><span class="hljs-keyword">public</span> BASE1,vitural <span class="hljs-keyword">public</span> BASE2<br>              <span class="hljs-keyword">public</span> BASE3,<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> BASE4<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    DERIVER():BASE4(),BASE3(),BASE2(),BASE1(),obj2(),obj1()&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;DERIVER&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<br>    protect:<br>    OBJ1 obj1;<br>    OBJ2 obj2;<br>&#125;<br><span class="hljs-comment">/*output</span><br><span class="hljs-comment">    BASE2</span><br><span class="hljs-comment">    BASE4</span><br><span class="hljs-comment">    BASE1</span><br><span class="hljs-comment">    BASE3</span><br><span class="hljs-comment">    OBJ1</span><br><span class="hljs-comment">    OBJ2</span><br><span class="hljs-comment">    DRIVER</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>DERIVER的虚基类BASE2和BASE4最先构造，所以先输出了BASE2和BASE4，尽管它们在DERIVER类中的顺序不在最前面。</li><li>然后在构造DERIVER的非虚基类，虽然它们排在前面，但是要优先构造虚基类，所以放在了虚基类后面。</li><li>再构造DERIVER的对象obj1和obj2.它们以类定义时，数据成员排在前面的先构造；</li><li>最后构造DERIVER本身。</li></ul><h3 id="抽象类实现多态"><a href="#抽象类实现多态" class="headerlink" title="抽象类实现多态"></a>抽象类实现多态</h3><p>抽象类的作用就是为后续的派生类提供了一个相当于“标准”之类的东西，派生类对抽象类的中的纯虚函数进行实现，之后定义<strong>基类指针，指向子类</strong>，然后通过这个指针访问函数时，会根据指针指向的类来具体访问指定类的函数，实现多态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;</span><span class="hljs-comment">//抽象类</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<span class="hljs-comment">//纯虚函数，获得面积</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<span class="hljs-comment">//纯虚函数，获得图形名称</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>:</span><span class="hljs-keyword">public</span> Shape&#123;<span class="hljs-comment">//Circle子类，继承自Shape</span><br><span class="hljs-keyword">public</span>:<br>    Circle(<span class="hljs-keyword">float</span> r):m_r(r)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span>*m_r*m_r;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Circle&quot;</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">float</span> m_r;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span>:</span><span class="hljs-keyword">public</span> Shape&#123;<span class="hljs-comment">//Rectangle子类，继承自Shape</span><br><span class="hljs-keyword">public</span>:<br>    Rectangle(<span class="hljs-keyword">float</span> w,<span class="hljs-keyword">float</span> h):m_w(w),m_h(h)&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getArea</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> m_w*m_h;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Rectangle&quot;</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">float</span> m_w,m_h;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Shape* shape=<span class="hljs-literal">NULL</span>;<span class="hljs-comment">//定义一个空的基类指针</span><br>    shape=<span class="hljs-keyword">new</span> Circle(<span class="hljs-number">5</span>);<span class="hljs-comment">//基类指针指向子类对象</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;shape-&gt;getName()&lt;&lt;<span class="hljs-string">&quot;&#x27;s area:&quot;</span>&lt;&lt;shape-&gt;getArea()&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">delete</span> shape;<span class="hljs-comment">//释放Circle对象所占内存，但指针仍然存在，需要注意的是现在该指针为野指针，使用前一定要重新赋值</span><br><br>    shape=<span class="hljs-keyword">new</span> Rectangle(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<span class="hljs-comment">//基类指针指向新的子类对象</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;shape-&gt;getName()&lt;&lt;<span class="hljs-string">&quot;&#x27;s area:&quot;</span>&lt;&lt;shape-&gt;getArea()&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">Circle<span class="hljs-number">&#x27;</span>s area:<span class="hljs-number">78.5</span><br>Rectangle<span class="hljs-number">&#x27;</span>s area:<span class="hljs-number">72</span><br></code></pre></td></tr></table></figure><p>通过上例，可以看到，针对基类指针指向的不同子类对象，调用相同函数时，相同语句分别实现了不同的功能，分别对应了各自子类的方法，实现了多态。</p><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>针对比较长的变量类型时可以直接写成auto，C++会自动判断变量的类型，将auto替换成对应的变量类型</p><p>就比如对vector进行遍历操作时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it=vec.begin(); it!=vec.end(); it++)&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//此时就可以直接将&quot;vector&lt;int&gt;::iterator&quot;直接替换为auto</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=vec.begin();it!=vec.end();it++)&#123;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a><strong>常用函数</strong></h4><ul><li><p><code>size()/length()</code> ：返回字符串长度</p></li><li><p><code>empty()</code> ：判断字符串是否为空</p></li><li><p><code>clear()</code> ：清空字符串</p></li><li><p><code>find(string s)</code>：返回子串s在母串中的初始位置</p></li><li><p><code>substr(size_t pos = 0, size_t len = npos)</code> ：返回子串，其中第一个参数pos表示子串起始下标，第二个参数表示子串长度</p></li><li><p><code>c_str()</code>：返回字符串所在字符数组的起始地址，主要针对printf用的，printf无法直接输出string类型，只能输出字符数组类型的字符串char[]</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;We think in generalities, but we live in details.&quot;</span>;<br><br><span class="hljs-built_in">string</span> str2 = str.substr (<span class="hljs-number">3</span>,<span class="hljs-number">5</span>); <span class="hljs-comment">// 起始坐标为3,子串长度为5,得到&quot;think&quot;</span><br><span class="hljs-keyword">size_t</span> pos = str.find(<span class="hljs-string">&quot;live&quot;</span>); <span class="hljs-comment">// 返回子串&quot;live&quot;在str中的初始位置</span><br><span class="hljs-built_in">string</span> str3 = str.substr (pos); <span class="hljs-comment">//缺省方式调用substr函数,第二个参数len默认为npos,表示字符串长度最大值.即得到从&quot;live&quot;到字符串结束的子串</span><br><span class="hljs-built_in">cout</span> &lt;&lt; str2 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span> &lt;&lt; str3 &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">think <br>live in details.<br></code></pre></td></tr></table></figure><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br></code></pre></td></tr></table></figure><p>支持比较运算，按字典算</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h4><ul><li><code>vector()</code>：创建一个空vector</li><li><code>vector(int nSize)</code>：创建一个vector，元素个数为nSize</li><li><code>vector(int nSize,const T &amp;t)</code>：创建一个vector，元素个数为nSize，且值均为t</li><li><code>vector(const vector&amp;)</code>：复制构造函数</li><li><code>vector(vegin,end)</code>：复制[begin,end)区间内另一个数组的元素到vector中（注意区间左闭右开）</li></ul><p>用法举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//创建一个空vector</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v1;<br><br><span class="hljs-comment">//创建了一个元素个数为n的vector</span><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(n)</span></span>;<span class="hljs-comment">//其中这n个元素默认值都为0，此时push_back(x)会在这n个0之后添加x</span><br><br><span class="hljs-comment">//创建了一个元素个数为n的vector，其中n个元素值都为5</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v3</span><span class="hljs-params">(n,<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//此时push_back(x)会接着在这n个5之后添加x</span><br><br><span class="hljs-comment">//复制构造函数</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v4</span><span class="hljs-params">(v3)</span></span>;<span class="hljs-comment">//将v3复制给了v4</span><br><br><span class="hljs-comment">//复制区间[begin,end)区间内另一个数组的元素到vector中</span><br><span class="hljs-keyword">int</span> s[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(s, s+<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//s+5指向的是s[]中最后一个元素的后一个位置</span><br><br></code></pre></td></tr></table></figure><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a><strong>常用函数</strong></h4><ul><li><code>size()</code>：返回向量中元素的个数</li><li><code>empty()</code>：向量为空则返回true</li><li><code>clear()</code>：清空向量中的所有元素</li><li><code>front()</code>：返回第一个元素的引用</li><li><code>back()</code>：返回最后一个元素的引用</li><li><code>begin()</code>：返回指向向量第一个元素的迭代器</li><li><code>end()</code>：返回指向向量最后一个元素的后一个元素的迭代器</li><li><code>push_back()</code>：向量尾部增加一个元素</li><li><code>pop_back()</code>：删除向量中最后一个元素</li></ul><p>对于vector排序，可以使用sort函数，sort函数默认升序排序（从小到大）。</p><p>使用sort对vector排序时，从小到大排就用vec.begin()和vec.end()</p><p>如果要从大到小排，就用vec.rbegin()和vec.rend()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> s[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(s, s+<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">//初始化vector，将s[]中的内容赋给vec&lt;int&gt;</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;*vec.begin()&lt;&lt;<span class="hljs-built_in">endl</span>;   <span class="hljs-comment">//指向第一个元素</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;*vec.end()&lt;&lt;<span class="hljs-built_in">endl</span>;     <span class="hljs-comment">//指向最后一个元素的后一个位置</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;*vec.rbegin()&lt;&lt;<span class="hljs-built_in">endl</span>;  <span class="hljs-comment">//reverse begin  指向最后一个元素</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;*vec.rend()&lt;&lt;<span class="hljs-built_in">endl</span>;    <span class="hljs-comment">//指向第一个元素的前一个元素</span><br>    <br>    <span class="hljs-comment">//正向排序 即按照从小到大的顺序排序</span><br>    sort(vec.begin(), vec.end());<br>    <span class="hljs-comment">//顺序访问</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it=vec.begin(); it!=vec.end(); it++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">//逆向排序 即按照从大到小的顺序进行排序</span><br>    sort(vec.rbegin(), vec.rend());<br>    <span class="hljs-comment">//顺序访问</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it=vec.begin(); it!=vec.end(); it++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>和<code>vector</code>基本一致，要注意的是<code>list</code>的内部存储逻辑是<strong>双向链表</strong></p><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stack&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">stack</span>&lt;T&gt; sta;<br></code></pre></td></tr></table></figure><h4 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a><strong>常用函数</strong></h4><ul><li><code>size()</code>：返回栈的长度（元素个数）</li><li><code>empty()</code>：判断栈是否为空</li><li><code>push()</code>：向栈顶插入一个元素（入栈）</li><li><code>pop()</code>：弹出栈顶元素（出栈）</li><li><code>top()</code>：返回栈顶元素</li></ul><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">#include&lt;queue&gt;<br></code></pre></td></tr></table></figure><h4 id="构造函数-2"><a href="#构造函数-2" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">queue</span>&lt;T&gt; que;<br></code></pre></td></tr></table></figure><h4 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a><strong>常用函数</strong></h4><ul><li><code>size()</code>：返回队列长度（元素个数）</li><li><code>empty()</code>：判断队列是否为空</li><li><code>push()</code>：向队尾插入一个元素（入队）</li><li><code>pop()</code>：弹出队头元素（出队）</li><li><code>front()</code>：返回队头元素</li><li><code>back()</code>：返回队尾元素</li></ul><h3 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue"></a>dequeue</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="构造函数-3"><a href="#构造函数-3" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">deque</span>&lt;T&gt; dq;<br></code></pre></td></tr></table></figure><h4 id="常用函数-4"><a href="#常用函数-4" class="headerlink" title="常用函数"></a><strong>常用函数</strong></h4><ul><li><code>size()</code>：返回双端队列长度（元素个数）</li><li><code>empty()</code>：判读双端队列是否为空</li><li><code>clear()</code>：清空双端队列</li><li><code>front()/back()</code>：返回队头/队尾元素</li><li><code>push_back()/pop_back()</code>：向队尾添加元素/从队尾弹出元素</li><li><code>push_front()/pop_front()</code>：向队头添加元素/从队头弹出元素</li><li><code>begin()</code>：返回指向队中对一个元素的迭代器</li><li><code>end()</code>：返回指向队列最后一个元素的后一个元素的迭代器（past-the-end，是个理论上的元素）</li></ul><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="常用函数-5"><a href="#常用函数-5" class="headerlink" title="常用函数"></a><strong>常用函数</strong></h4><ul><li><code>empty()</code>：队列为空，返回true</li><li><code>top()</code>：返回队顶元素</li><li><code>pop()</code>：删除队顶元素</li><li><code>push()</code>：插入一个元素（根据规则自动排序）</li><li><code>size()</code>：返回优先队列中拥有的元素个数</li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-title">Container</span> =</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;T&gt;,<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span> =</span> <span class="hljs-built_in">std</span>::less&lt;<span class="hljs-keyword">typename</span> Container::value_type&gt;<br>&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">priority_queue</span>;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>T</td><td>优先队列中存放的数据类型</td><td></td></tr><tr><td>Container</td><td>用于实现优先队列（潜在）的容器类型</td><td>vector&lt;T&gt;</td></tr><tr><td>Compare</td><td>比较函数，用于判断一个元素是否小于另一个元素。如果 Compare(x,y) 为真，则 x 小于 y。Q.top()  返回的元素是优先级队列中最大的元素。也就是说，它的属性是，对于优先级队列中的每个其他元素 x，Compare(Q.top(), x) 为  false。</td><td>less&lt;T&gt;</td></tr></tbody></table><ul><li>Container：必须是用数组实现的容器，如vector、deque，但不能用list。STL中默认使用vector</li><li>Compare：比较方式默认使用less&lt;T&gt;，operator &lt; (小于号)</li><li>如果把后面两个参数缺省，优先队列使用默认参数，为大根堆，队顶元素最大</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>&gt; que;<br><span class="hljs-comment">//等价于</span><br><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;,less&lt;<span class="hljs-keyword">int</span>&gt; &gt; que;<br><span class="hljs-comment">//编译器比较旧两个将括号中间加空格，保险起见，直接加空格为好，防止识别成右移&quot;&gt;&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>其中less&lt;T&gt;为仿函数，定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// TEMPLATE STRUCT less</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Ty</span>&gt;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">less</span> :</span> <span class="hljs-keyword">public</span> binary_function&lt;_Ty, _Ty, <span class="hljs-keyword">bool</span>&gt;<br>&#123;<span class="hljs-comment">// functor for operator&lt;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> _Ty&amp; _Left, <span class="hljs-keyword">const</span> _Ty&amp; _Right)</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">// apply operator&lt; to operands</span><br><span class="hljs-keyword">return</span> (_Left &lt; _Right);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>less&lt;T&gt;使用的比较规则是基于 &lt;（小于号）的，所以当priority_queue是基于less比较规则的时候，我们可以重载 &lt;（小于号）来实现自定义类型变量的比较</p><h4 id="更改比较函数——仿函数greater-lt-T-gt"><a href="#更改比较函数——仿函数greater-lt-T-gt" class="headerlink" title="更改比较函数——仿函数greater&lt;T&gt;"></a>更改比较函数——仿函数greater&lt;T&gt;</h4><p>上面已经说过默认的比较规则less&lt;T&gt;，由此实现了大根堆的优先队列；STL还定义了与less&lt;T&gt;相对的仿函数greater&lt;T&gt;，将priority_queue的第三个参数，即比较规则改为greater&lt;T&gt;即可实现小根堆。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-keyword">int</span> ,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ,geater&lt;<span class="hljs-keyword">int</span>&gt; &gt; que;<br></code></pre></td></tr></table></figure><p>其中greater&lt;T&gt;的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// TEMPLATE STRUCT greater</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> _<span class="hljs-title">Ty</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">greater</span> :</span> <span class="hljs-keyword">public</span> binary_function&lt;_Ty, _Ty, <span class="hljs-keyword">bool</span>&gt;<br>&#123;<span class="hljs-comment">// functor for operator&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> _Ty&amp; _Left, <span class="hljs-keyword">const</span> _Ty&amp; _Right)</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">// apply operator&gt; to operands</span><br><span class="hljs-keyword">return</span> (_Left &gt; _Right);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以看到相较于less&lt;T&gt;，greater&lt;T&gt;的比较规则是基于 &gt;（大于号）的，所以如果要在基于greater&lt;T&gt;的比较规则下实现自定义类型变量的比较，需要重载 &gt;（大于号）。</p><h4 id="自定义类型——大顶堆"><a href="#自定义类型——大顶堆" class="headerlink" title="自定义类型——大顶堆"></a>自定义类型——大顶堆</h4><p>STL中的仿函数less&lt;T&gt;和greater&lt;T&gt;的使用范围仅限于基本类型，当使用我们自定义的数据类型时，我们需要自定义比较规则。</p><ul><li>**重载运算符 &lt; **</li></ul><p>为什么要重载 &lt;（小于号）而不是 &gt;（大于号），原因在于此时我们的声明形式通常是将后面两个参数缺省的，也就是此时会默认使用仿函数less&lt;T&gt;，而less中的比较使用的是 &lt;（小于号）。如果想要重载 &gt;（大于号），还需要在声明priority_queue时注明剩下的两个参数，并将第三个参数设置为greater&lt;T&gt;，所以完全不必如此自找麻烦，直接重载 &lt;（小于号）即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 重载 &lt; 运算符，实现大顶堆</span><br><span class="hljs-comment">//（堆顶元素：先根据x，选择x最大的元素；若两个元素的x值相同，再根据y，选择两者中y较大的元素） </span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(My_Type a,My_Type b)<br>&#123;<br>    <span class="hljs-comment">// 定义排序规则 </span><br>    <span class="hljs-keyword">if</span>(a.x==b.x) <span class="hljs-keyword">return</span> a.y&lt;b.y;<br>    <span class="hljs-keyword">return</span> a.x&lt;b.x; <br>&#125;<br><span class="hljs-comment">// 定义优先队列</span><br><span class="hljs-built_in">priority_queue</span>&lt;My_Type&gt; que;<span class="hljs-comment">//缺省声明，默认使用less&lt;T&gt; </span><br></code></pre></td></tr></table></figure><ul><li><strong>自定义仿函数</strong></li></ul><p>从priority_queue的定义中已经知道，它进行排序需要依靠其第三个参数定义的比较规则，而这些比较规则用的是仿函数，所以除了重载仿函数使用的比较运算符，我们可以直接自己写一套比较规则，也就是自定义一个仿函数，来实现我们需要的自定义类型变量的比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 仿函数，实现大顶堆 </span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmp</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// 定义排序规则 </span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(My_Type a,My_Type b )</span></span><br><span class="hljs-function">    </span>&#123; <br>        <span class="hljs-keyword">if</span>(a.x==b.x)<span class="hljs-keyword">return</span> a.y&lt;b.y;<br>        <span class="hljs-keyword">return</span> a.x&lt;b.x; <br>    &#125;<br>&#125;; <br><span class="hljs-comment">// 定义优先队列</span><br><span class="hljs-built_in">priority_queue</span>&lt;My_Type,<span class="hljs-built_in">vector</span>&lt;My_Type&gt;,cmp&gt;que;<br></code></pre></td></tr></table></figure><h4 id="自定义类型——小顶堆"><a href="#自定义类型——小顶堆" class="headerlink" title="自定义类型——小顶堆"></a>自定义类型——小顶堆</h4><p>跟自定义类型的大顶堆同理，只需要改变部分细节即可</p><ul><li>**重载运算符 &lt; **</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 重载 &lt; 运算符，实现小顶堆 </span><br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(My_Type a,My_Type b)<br>&#123;<br>    <span class="hljs-comment">// 定义排序规则 </span><br>    <span class="hljs-keyword">if</span>(a.x==b.x) <span class="hljs-keyword">return</span> a.y&gt;b.y;<br>    <span class="hljs-keyword">return</span> a.x&gt;b.x; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>自定义仿函数</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 仿函数，实现小顶堆 </span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmp</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// 定义排序规则 </span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(My_Type a,My_Type b )</span></span><br><span class="hljs-function">    </span>&#123; <br>        <span class="hljs-keyword">if</span>(a.x==b.x)<span class="hljs-keyword">return</span> a.y&gt;b.y;<br>        <span class="hljs-keyword">return</span> a.x&gt;b.x; <br>    &#125;<br>&#125;; <br></code></pre></td></tr></table></figure><h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h2><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;utility&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>类模板：</strong><code>template&lt;class T1,class T2&gt; struct pair</code></p><p><strong>参数：</strong>T1表示第一个值得数值类型，T2是第二个值得参数类型</p><p><strong>功能：</strong> <strong>pair</strong>将一对值<strong>（t1，t2）</strong>组合成一个值，这一对值可以具有不同数据类型，分别通过pair的成员函数<strong>first</strong>和<strong>second</strong>访问</p><h4 id="构造函数-4"><a href="#构造函数-4" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">pair</span>&lt;T1,T2&gt; p1;<span class="hljs-comment">//创建一个空pair对象</span><br>pair&lt;T1,T2&gt; p2(v1,v2);//创建一个pair对象,p2.first=v1,p2.second=v2<br></code></pre></td></tr></table></figure><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a><strong>常用操作</strong></h4><ul><li><code>make_pair(v1,v2)</code>：以v1和v2的值创建一个新pair对象，元素类型分别为v1和v2的变量类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> p=<span class="hljs-built_in">make_pair</span>(v1,v2);<br></code></pre></td></tr></table></figure><ul><li><code>p.first</code>：返回p中第一个元素</li><li><code>p.second</code>：返回p中第二个元素（注意这两个是pair的成员，使用时不要加括号）</li><li><code>p1 &lt; p2</code>：两个pair对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者 !(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回true</li><li><code>p1==p2</code>：如果两个对象的first和second依次相等，则这两个对象相等</li></ul><h3 id="map-multimap"><a href="#map-multimap" class="headerlink" title="map/multimap"></a>map/multimap</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="map定义"><a href="#map定义" class="headerlink" title="map定义"></a>map定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Key</span>,                                     // 指定键（<span class="hljs-title">key</span>）的类型</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,                                       // 指定值（<span class="hljs-title">value</span>）的类型</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span> =</span> less&lt;Key&gt;,                     <span class="hljs-comment">// 指定排序规则</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alloc</span> =</span> allocator&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">const</span> Key,T&gt; &gt;    <span class="hljs-comment">// 指定分配器对象的类型</span><br>&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">map</span>;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>key</td><td>指定键（key）的类型</td><td></td></tr><tr><td>T</td><td>指定值（value）的类型</td><td></td></tr><tr><td>Compare</td><td>指定排序规则</td><td>less&lt;key&gt;</td></tr><tr><td>Alloc</td><td>指定分配器对象的类型</td><td>pair&lt;key,T&gt;</td></tr></tbody></table><ul><li>通常情况在声明map类型变量是只设定前两个参数的值</li><li>第三个参数默认使用less&lt;key&gt;规则排序，即会按照key值的大小进行升序排序，可根据自身需要改变该参数（自定义仿函数）或者重载 &lt;（小于号）</li><li>第四个参数基本不会用到，其默认为pair&lt;key,T&gt;，即map中每个元素是一个pair对象</li></ul><h4 id="map和multimap的区别"><a href="#map和multimap的区别" class="headerlink" title="map和multimap的区别"></a>map和multimap的区别</h4><p><code>map</code>中的一个关键字<code>key</code>只能出现一次，而<code>multimap</code>中的，一个关键字<code>key</code>可以出现多次</p><h4 id="构造函数-5"><a href="#构造函数-5" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; m;<span class="hljs-comment">//简单举个例子</span><br></code></pre></td></tr></table></figure><h4 id="常用函数-6"><a href="#常用函数-6" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>size()</code></li><li><code>empty()</code></li><li><code>clear()</code></li><li><code>begin()/end()</code></li><li><code>++/--</code>：支持迭代器的<code>++</code>或<code>--</code>操作</li><li><code>insert()</code>：向map中插入键值对，元素类型应为pair类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt; m;<br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt; p;<br><span class="hljs-comment">//有现成pair类型</span><br>m.insert(p);<br><span class="hljs-comment">//没有现成pair类型，可以在insert参数列表中创建一个pair</span><br>m.insert(&#123;<span class="hljs-string">&quot;word&quot;</span>,<span class="hljs-number">1</span>&#125;);<br>m.insert(<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;word&quot;</span>,<span class="hljs-number">1</span>));<br>m.insert(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt;(<span class="hljs-string">&quot;word&quot;</span>,<span class="hljs-number">1</span>));<br>m.insert(<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-keyword">int</span>&gt;::value_type(<span class="hljs-string">&quot;word&quot;</span>,<span class="hljs-number">1</span>));<span class="hljs-comment">//value_type是map中的类型别名，在这里相当于pair&lt;string,int&gt;，一般谁这么写啊...</span><br></code></pre></td></tr></table></figure><ul><li> <code>erase()</code>：删除元素</li></ul><table><thead><tr><th>具体操作</th><th>描述</th></tr></thead><tbody><tr><td><code>c.erase(k)</code></td><td>从c中删除每个关键字为k的元素，返回一个size_type值，指出删除的元素的个数</td></tr><tr><td><code>c.erase(p)</code></td><td>从c中删除迭代器p指定的元素。p必须指向c中一个真实元素，不能使<code>c.end()</code>。返回一个指向p之后元素的迭代器，若p指向c中的尾元素，则返回<code>c.end()</code></td></tr><tr><td><code>c.erase(b,e)</code></td><td>删除迭代器对b和e所表示的范围中的元素。返回e</td></tr></tbody></table><ul><li><code>operator[]</code>：map容器重载了 [] 运算符，只要知道 map 容器中某个键值对的键的值，就可以向获取数组中元素那样，通过键直接获取对应的值。</li><li>注意<code>multimap</code>并不支持下标操作，毕竟<code>multimap</code>中相同关键字可以出现多次</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">c[k];<span class="hljs-comment">//返回关键字为k的元素(返回的是key对应的value)，如果k不在c中，添加一个关键字为k的元素，对其进行值初始化</span><br>c.at(k);<span class="hljs-comment">//访问关键字为k的元素(也能返回key对应的value)，带参数检查；若k不在c中，抛出一个out_of_range异常</span><br></code></pre></td></tr></table></figure><ul><li><code>find(k)</code>：在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。另外，如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//比较find()和下标操作可以看出，下标操作在没有找到指定key值得元素的时，会自动添加一个键值为key，value默认为0的元素;find()则不会改变map</span><br><span class="hljs-comment">//所以在不想改变map的情况下，想判断一个元素是否存在应使用find()而不是下标寻找</span><br><span class="hljs-comment">//当然如果肯定key值对应的元素存在，就是要用下标来找当然没问题</span><br></code></pre></td></tr></table></figure><ul><li><code>count(k)</code>：返回关键字等于k的元素的数量。对于不允许重复关键字的容器，返回值永远是0或1</li><li><code>lower_bound(k)</code>：返回一个迭代器，指向第一个关键字不小于k的元素</li><li><code>upper_bound(k)</code>：返回一个迭代器，指向第一个关键字大于k的元素</li></ul><h3 id="set-multiset"><a href="#set-multiset" class="headerlink" title="set/multiset"></a>set/multiset</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="set模板定义"><a href="#set模板定义" class="headerlink" title="set模板定义"></a>set模板定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt; <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,                        // 键 <span class="hljs-title">key</span> 和值 <span class="hljs-title">value</span> 的类型</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span> =</span> less&lt;T&gt;,        <span class="hljs-comment">// 指定 set 容器内部的排序规则</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alloc</span> =</span> allocator&lt;T&gt;      <span class="hljs-comment">// 指定分配器对象的类型</span><br>&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">set</span>;</span><br></code></pre></td></tr></table></figure><ul><li><code>set</code>和<code>map</code>相似，里面存储的也是键值对，但是<code>set</code>中键<code>key</code>和值<code>value</code>的数值要是相等的，因此在声明时只需指定一个变量类型，作为<code>key</code>和<code>value</code>共同的类型</li><li><code>set</code>也默认使用<code>less&lt;T&gt;</code>的排序规则</li><li>参数三默认的分配器类型是？</li></ul><h4 id="set和multiset的区别"><a href="#set和multiset的区别" class="headerlink" title="set和multiset的区别"></a>set和multiset的区别</h4><p><code>multiset</code> 容器和 <code>set</code> 容器唯一的差别在于，<code>multiset</code> 容器允许存储多个值相同的元素，而 <code>set</code> 容器中只能存储互不相同的元素。</p><h4 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h4><p>与<code>map/multimap</code>基本一致，参考<code>map/multimap</code>部分即可</p><h3 id="unordered-set-unordered-map-unordered-multiset-unordered-multimap"><a href="#unordered-set-unordered-map-unordered-multiset-unordered-multimap" class="headerlink" title="unordered_set, unordered_map, unordered_multiset, unordered_multimap"></a>unordered_set, unordered_map, unordered_multiset, unordered_multimap</h3><ul><li>上述容器的无序版本，不会对存储的元素进行排序</li><li>相关的操作也和上述关联容器形似</li><li>会有一些特定的函数使用不了，比如<code>lower_bound(k)/upper_bound(k)</code>这类牵扯到比较大小的函数</li><li>注意这些容器使用的存储逻辑是<strong>哈希表</strong>，不支持迭代器的<code>++</code>或<code>--</code>操作</li></ul><h1 id="待总结"><a href="#待总结" class="headerlink" title="待总结"></a>待总结</h1><h2 id="bitset-圧位"><a href="#bitset-圧位" class="headerlink" title="bitset, 圧位"></a>bitset, 圧位</h2><p>​    bitset&lt;10000&gt; s;<br>​    ~, &amp;, |, ^<br>​    &gt;&gt;, &lt;&lt;<br>​    ==, !=<br>​    []</p><pre><code>count()  返回有多少个1any()  判断是否至少有一个1none()  判断是否全为0set()  把所有位置成1set(k, v)  将第k位变成vreset()  把所有位变成0flip()  等价于~flip(k) 把第k位取反</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-C-相关&quot;&gt;&lt;a href=&quot;#C-C-相关&quot; class=&quot;headerlink&quot; title=&quot;C/C++相关&quot;&gt;&lt;/a&gt;C/C++相关&lt;/h1&gt;&lt;h2 id=&quot;变量声明&quot;&gt;&lt;a href=&quot;#变量声明&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/20/hello-world/"/>
    <id>http://example.com/2021/03/20/hello-world/</id>
    <published>2021-03-20T07:34:56.000Z</published>
    <updated>2023-03-23T16:01:35.522Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h1 id="lt-lt-lt-lt-lt-lt-lt-HEAD"><a href="#lt-lt-lt-lt-lt-lt-lt-HEAD" class="headerlink" title="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</h1><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>37bc485ba4a3b31d02a3ba25267af1715187b72c</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>

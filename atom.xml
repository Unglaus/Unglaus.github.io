<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-10T05:01:06.680Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dr.Unglaus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt6.4_PCL1.12.1_VTK9.2_error(待整理)</title>
    <link href="http://example.com/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/"/>
    <id>http://example.com/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/</id>
    <published>2023-03-09T14:27:39.000Z</published>
    <updated>2023-03-10T05:01:06.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>一开始因为PCL自带一个VTK9.1环境，因为要VTK和Qt配合，去官网下了完整VTK9.2自己编译了一下，然后又在Qt项目里配了一下VTK的环境，估计是他先找到了PCL自带的VTK9.1环境，就没管我自己配的VTK9.2，导致报了个“未定义标识符VTK_UNICODE_STRING”的错</p><p>（此处有图，等重新截一张）</p><p>考虑到两个VTK环境冲突的问题，他把PCL自带的那个VTK9.2的环境配置都删了一遍，结果又出现了下面的问题</p><img src="/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/image-20230309223634357.png" class="" title="image-20230309223634357"><p>看到这个dll想到可能是因为环境变量里PCL自带的VTK9,1和自己编译的VTK9.2冲突了，忘记改了，因为程序寻找dll文件是从环境变量PATH中从头到尾在找，当找到一个对应的目录的时候它就认定在这个目录里寻找dll文件了，而不会再往下找了，应该就是因为我把PCL自带的VTK9.1的bin路径放在了自己编译的VTK9.2的bin路径之前导致的问题</p><p>结果一看不对啊，自己编译的VTK9.2的bin路径是在上面的呀，惊了。。。</p><p>然后我又试了试直接把PCL自带的VTK9.1的bin路径删掉，结果程序报错找不到vtk9.1d的dll了，说明程序哪里还用着pcl自带的vtk9.1 。。。</p><p>话说pcl自带的vtk9.1有QVTKOpenGLNativeWidget吗，有的话我直接用PCL自带vtk9.1算了。。。</p><p>去看了一下没有，然后想起来了，这个模块是要编译VTK的时候选一下配合Qt才会生成，乐，还是要用自己配的。。。</p><p>可能是PCL一些东西配合自带的VTK才能实现，明天试试把自己编译的VTK覆盖PCL自带的VTK试一下。。。记得做好备份</p><p>实在不行就得把PCL编译需要的东西都下一遍，然后用CMake从头编译一下来弄了。。。</p><p>第二天继续试，把VTK覆盖试了试好像不行</p><p>然后开始调试，看看是哪个语句的问题，发现是初始化语句的问题，因为初始化用的是qvtkwidget版本时的代码，所以可能有些问题，于是就去找了QVTKOpenGLNativeWidget版本显示点云数据的代码</p><p>结果照着别人的代码敲还是有问题</p><img src="/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/image-20230310104709194.png" class="" title="image-20230310104709194"><p>找了找资料发现出现这种问题一般是因为这个类没有定义，其实就是vtkGenericOpenGLRenderWindow这个类的头文件没有引入，这里不得不吐槽一下，既然头文件没引入，你上面的的没啥不报错啊。。。</p><p>引入头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vtkGenericOpenGLRenderWindow.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>之后该语句就不会报错了</p><img src="/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/image-20230310105029695.png" class="" title="image-20230310105029695"><p>以为终于没问题的时候，在执行到语句</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewer.reset(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(renderer,renderWindow,<span class="string">&quot;viewer&quot;</span>, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p>的时候还是报错了。</p><img src="/2023/03/09/Qt6.4_PCL1.12.1_VTK9.2_error/image-20230310104511765.png" class="" title="image-20230310104511765"><p>估计还是因为弄了两个vtk导致的，可能pcl1.12和自己配的这个vtk9.2不太搭，网上查了查资料，也都是自己下一个vtk9.1自己编译一下，然后覆盖原来的pcl自带的vtkk，然后再编译PCL。</p><p>这次就老实照这个来一遍<a href="https://blog.csdn.net/qq_40732350/article/details/125394920%EF%BC%8C%E4%BB%96%E8%B7%9F%E6%88%91%E6%83%B3%E7%9A%84%E4%B8%80%E6%A0%B7%EF%BC%8C%E9%99%A4%E4%BA%86vtk%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%EF%BC%8C%E5%85%B6%E4%BB%96%E7%9B%B4%E6%8E%A5%E7%94%A8pcl%E8%87%AA%E5%B8%A6%E7%9A%84%E7%BC%96%E8%AF%91%E5%A5%BD%E7%9A%84%E5%B0%B1%E8%A1%8C%EF%BC%8C%E7%9C%81%E4%BA%8B%E3%80%82">https://blog.csdn.net/qq_40732350/article/details/125394920，他跟我想的一样，除了vtk自己编译，其他直接用pcl自带的编译好的就行，省事。</a></p><p>等开完会试一下。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;一开始因为PCL自带一个VTK9.1环境，因为要VTK和Qt配合，去官网下了完整VTK9.2自己编译了一下，然后又在Qt项目</summary>
      
    
    
    
    <category term="问题" scheme="http://example.com/categories/%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
    <category term="PCL" scheme="http://example.com/tags/PCL/"/>
    
    <category term="VTK" scheme="http://example.com/tags/VTK/"/>
    
  </entry>
  
  <entry>
    <title>OCC7.6+VS2022配置</title>
    <link href="http://example.com/2023/03/08/OCC7.6_VS2022_config/"/>
    <id>http://example.com/2023/03/08/OCC7.6_VS2022_config/</id>
    <published>2023-03-08T02:29:37.000Z</published>
    <updated>2023-03-09T13:51:33.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OCC安装与编译"><a href="#OCC安装与编译" class="headerlink" title="OCC安装与编译"></a>OCC安装与编译</h2><h3 id="安装OCC"><a href="#安装OCC" class="headerlink" title="安装OCC"></a>安装OCC</h3><p>安装很简单，就是去官网<a href="https://dev.opencascade.org/">https://dev.opencascade.org/</a> 下载安装包安装即可。</p><p>这里用的是OCC7.6版本。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308110314910.png" class="" title="image-20230308110314910"><p>注意：安装的时候路径不要有空格和汉字。</p><h3 id="VS2022编译v142的OCC"><a href="#VS2022编译v142的OCC" class="headerlink" title="VS2022编译v142的OCC"></a>VS2022编译v142的OCC</h3><p>安装之后得到的是OCC的编译前的资源文件，而想要使用OCC提供的方法还需要将这些文件进行编译。即编译后得到的文件才是我们使用OCC所必须的。</p><p>这里我安装的VS版本为2022，其默认的生成工具是v143，而OCC7.6最新支持的生成工具是v142，所以需要稍微操作一下，使VS2022能编译OCC。</p><p>需要注意的是，因为要用到v142生成工具，肯定要保证VS安装了v142的生成工具，没安的话打开Visual Studio Installer安一下即可。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308180525147.png" class="" title="image-20230308180525147"><p>下面是OCC部分编译前的一些操作：<br>打开安装目录下 \opencascade-7.6.0 目录下的custom.bat，将其中要求的vcvarsall.bat文件所在路径填写完整，该路径跟VS安装的位置有关，下图我的路径配置。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308193109354.png" class="" title="image-20230308193109354"><p>如果实在不知道在哪，可以安装一个软件”everything“，用它来查找vcvarsall.bat的位置即可</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308193610012.png" class="" title="image-20230308193610012"><p>之后，还是在 \opencascade-7.6.0 目录下，打开env.bat，在图示位置添加：<code>set “VCVER=vc143”</code></p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308195613333.png" class="" title="image-20230308195613333"><p>再打开 \opencascade-7.6.0\adm\msvc目录下，复制一份vc142并重命名为vc143，这就是前面提到的，OCC7.6还没有对应的2022版本（vc143）</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308200116215.png" class="" title="image-20230308200116215"><p>至此准备工作结束，可以用VS2022编译OCC7.6了</p><p>回到目录 \opencascade-7.6.0，双击msvc.bat，它会根据前面的配置打开对应版本的OCCT.sln，打开后会需要确认是否升级平台工具集，记得选择”无升级“。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308200951007.png" class="" title="image-20230308200951007"><p>之后找到“解决方案资源管理器”，右键“解决方案”，选择“生成解决方案”即可</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308201434134.png" class="" title="image-20230308201434134"><p>等待VS编译完成</p><p>（编译完成图–等我在新电脑上配的时候截一张，懒得再重新生成一遍了）</p><p>编译完成后生成的文件在 \opencascade-7.6.0\win64\vc14 目录下</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308211826087.png" class="" title="image-20230308211826087"><p>其中的bind文件夹、libd文件夹中的文件是我们使用OCC所必需的的文件。一般是bin文件夹和lib文件夹，不过在OCC这里是bind和libd，应该是分别表示bin和lib的debug版本。因为我一直用的debug版本调试，找的教程也都是说配bind和libd的，不太清楚这个bin和lib是不是在release版本下用的，等之后如果用到release调试的时候试一下看看，等试过之后再来补充。</p><p>libd文件夹，存放程序运行时所需要的lib文件，lib文件是指程序库（library）文件，也称为静态链接库（static library），它包含了一组可在程序中共享的函数和资源的代码。</p><p>bind文件夹，存放运行lib时所必需的的dll文件，DLL（Dynamic Link Library）是一种可执行文件格式，它包含一组可在多个程序中共享的函数和资源。它通常被用于在 Windows 操作系统中实现共享库和插件的功能。一个 DLL 文件可以包含多个函数和资源，其他程序可以通过动态链接库（Dynamic Link Library）的方式调用 DLL 文件中的函数。</p><h2 id="VS中配置OCC环境"><a href="#VS中配置OCC环境" class="headerlink" title="VS中配置OCC环境"></a>VS中配置OCC环境</h2><p>前面也提到，我们所需的bind文件夹和libd文件夹生成好了之后，就可以配置在VS中使用OCC所需的一些属性，像OCC、PCL、VTK这种C++的库，其项目属性配置基本都是一致的，基本就是三步走。</p><p>第一步，将dll文件所在路径，在OCC这里即是上述提到的bind文件夹路径，添加到系统环境变量Path中</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308214135094.png" class="" title="image-20230308214135094"><p>之后在我们所建的项目中，在解决方案栏中，右键点击项目，选择属性一栏</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308214410626.png" class="" title="image-20230308214410626"><p>在属性页找到 调试—&gt;环境，输入 <code>PATH=%PATH%</code> ，使调试时能找到环境变量中bind所在路径，进一步能找到dll文件</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308214657910.png" class="" title="image-20230308214657910"><p>第二步，在属性页中找到 链接器—&gt;常规—&gt;附加库目录，将libd所在路径添加进去，方便编译器编译时能找到lib文件</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308215305372.png" class="" title="image-20230308215305372"><p>再找到 链接器—&gt;输入—&gt;附加依赖项，将libd文件夹下所有的lib文件添加进去</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308215515181.png" class="" title="image-20230308215515181"><p>至于如何快速取得文件夹下所有lib文件列表，找到目标文件夹libd，在该文件夹下“shift+右键”，选择 Powershell打开</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308220253619.png" class="" title="image-20230308220253619"><p>在该命令窗口输入 <code>ls *.lib -n</code>，即可得到该文件夹下所有lib结尾的文件列表，其中<code>-n</code>是指定列出来的信息只包含文件名和后缀，可以自己试试不带<code>-n</code>的结果</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308220606901.png" class="" title="image-20230308220606901"><p>第三步，在属性页找到 C/C++—&gt;常规—&gt;附加库包含目录，将OCC的头文件路径添加进去，该路径为安装目录下 \opencascade-7.6.0\inc ，其中存放的是在使用OCC时所需的所有头文件</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230308220708196.png" class="" title="image-20230308220708196"><p>上面三步无关顺序，能配完就行。</p><p>至此，就可以在C++程序中使用OCC提供的各种功能啦，开始愉快编程啦~</p><h2 id="VS属性表的使用"><a href="#VS属性表的使用" class="headerlink" title="VS属性表的使用"></a>VS属性表的使用</h2><h3 id="新建属性表"><a href="#新建属性表" class="headerlink" title="新建属性表"></a>新建属性表</h3><p>上面配置的VS属性页只针对当前项目有效，如果要新建项目并使用OCC，需要将上面的三个步骤再配置一遍，很不方便。而使用VS属性表就可以实现只用配置一次，下次直接拿来用即可的效果</p><p>在VS窗口上边菜单栏找到 视图—&gt;其他窗口—&gt;属性管理器</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309092828035.png" class="" title="image-20230309092828035"><p>选择之后，属性管理器就会出现在解决方案管理器旁边的位置</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309102328776.png" class="" title="image-20230309102328776"><p>找到自己需要的版本，比如我一般使用Debug|x64版本，我就在对应项旁边右键，选择 添加新项目属性表</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309102607140.png" class="" title="image-20230309102607140"><p>因为是给OCC配置的属性表，就叫OCC.props吧，至于这个位置，它默认是建在当前项目所在的文件夹中，可以自定义一个文件夹位置，就光用来存这种属性表，当时候项目中需要哪个属性表，就直接去那个文件夹中好就行。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309093633371.png" class="" title="image-20230309093633371"><p>在建好的属性表里，把前面第二步、第三步里，关于“C/C++”和“链接器”选项中的部分复现一下即可，简单概括就是“C/C++”的附加包含目录里添加头文件目录，”链接器“的附加库目录里添加lib库路径、附加依赖项里把lib库中的所有lib添加进去。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309093948772.png" class="" title="image-20230309093948772"><p>可以看到这个属性表里没有第一步中“调试”选项，所以在 调试—&gt;环境，输入 <code>PATH=%PATH%</code> 这一步还是需要在具体的新建项目中配置一下，步骤参考前面第一步。</p><h3 id="使用已有属性表"><a href="#使用已有属性表" class="headerlink" title="使用已有属性表"></a>使用已有属性表</h3><p>上面属性表建好之后，下次新的项目要是用OCC的时候，直接把这个属性表引入即可</p><p>在属性管理器，要是用的对应版本处右键点击，选择 添加现有属性页</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309102725370.png" class="" title="image-20230309102725370"><p>找到之前建好的属性表，添加即可</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309102917214.png" class="" title="image-20230309102917214"><p>需要注意的是，通过这种添加现有项方式加入的属性表并不是把之前建的表复制了一个放在新项目里，新项目中是找不到这个属性表文件的，它实际还是之前建的那个属性表，只是编译器把它链接了过来，使我们可以使用该表的配置。这也意味着你如果在对这个属性表进行改动，会影响到所有使用该属性表的项目，一定要注意。</p><img src="/2023/03/08/OCC7.6_VS2022_config/image-20230309110423674.png" class="" title="image-20230309110423674"><p>当然，其实也可以将之前建的属性表复制一个到新建项目的文件夹里，然后在添加现有项时添加当前这一个，这样就可以随便改了，也不会对别的项目有什么影响。</p><p>以上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;OCC安装与编译&quot;&gt;&lt;a href=&quot;#OCC安装与编译&quot; class=&quot;headerlink&quot; title=&quot;OCC安装与编译&quot;&gt;&lt;/a&gt;OCC安装与编译&lt;/h2&gt;&lt;h3 id=&quot;安装OCC&quot;&gt;&lt;a href=&quot;#安装OCC&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="OCC" scheme="http://example.com/tags/OCC/"/>
    
  </entry>
  
  <entry>
    <title>大家一起学英语</title>
    <link href="http://example.com/2023/03/07/English-Word/"/>
    <id>http://example.com/2023/03/07/English-Word/</id>
    <published>2023-03-07T07:34:56.000Z</published>
    <updated>2023-03-10T05:13:19.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在学习OCC、PCL等C++库，或是其他一些技术时，通常需要阅读官方提供的技术手册，而这些手册大多是英文编写，虽然可以直接使用翻译软件进行翻译，但毕竟翻译软件有时翻译的也是词不达意，加之它可能把人家定义的类名之类的东西也翻译成中文，还不如直接看英文。综上，长远来看，提升自己的英文水平总没错，本文用来收集阅读英文手册或教程时遇到的各种不认识的单词，也不指望能将这些单词全部融汇贯通，但希望下次见到时最起码能认得它是个什么意思。</p><h3 id="OCC"><a href="#OCC" class="headerlink" title="OCC"></a>OCC</h3><ul><li>geometry：几何学</li><li>parametric：参数</li><li>dimension：纬度</li><li>infinity：无限大</li><li>second order：二阶</li><li>criteria：标准</li><li>scaled ellipse：缩放的椭圆</li><li>cylinder：圆筒</li><li>conjugate：共轭的</li><li>projection：投影</li><li>intersection：交叉点</li><li>topology：拓扑学</li></ul><h3 id="PCL"><a href="#PCL" class="headerlink" title="PCL"></a>PCL</h3><ul><li>complicate：复杂化</li><li>trim：修剪</li><li>outliers：离群值、异常值</li><li>deviation：偏差</li></ul><h3 id="CloudCompare-Wiki"><a href="#CloudCompare-Wiki" class="headerlink" title="CloudCompare Wiki"></a>CloudCompare Wiki</h3><ul><li>mesh：网格</li></ul><p>不定期更新中。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;在学习OCC、PCL等C++库，或是其他一些技术时，通常需要阅读官方提供的技术手册，而这些手册大多是英文编写，虽然可以直接使用翻译软件进行翻</summary>
      
    
    
    
    <category term="英文学习" scheme="http://example.com/categories/%E8%8B%B1%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="English Word" scheme="http://example.com/tags/English-Word/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/03/20/hello-world/"/>
    <id>http://example.com/2021/03/20/hello-world/</id>
    <published>2021-03-20T08:23:24.435Z</published>
    <updated>2023-03-02T03:01:21.143Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
